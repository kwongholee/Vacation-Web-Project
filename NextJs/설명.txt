page.js: 메인 페이지
layout.js: page.js를 감싸는 것들(보통 head 태그 안에 들어가는 것들 등)
global.css: 모든 페이지에 적용되는 css
xx.module.css: 특정 페이지에만 적용되는 css
api 폴더: 서버 기능을 만들 수 있는 공간
public 폴더: 이미지, 폰트 등을 저장하는 곳
리액트버전 html: JSX
React와 Next의 차이점 
1. return() 안에 html 넣을 때 1개의 태그로 마무리되어야함
2. class 넣고 싶으면 className으로 선언해야함
3. html 안에 변수 넣으려면 {} (JSX의 데이터 바인딩) (html 속성 안에도 데이터 바인딩 똑같이 가능함)
4. style 속성 넣으려면 style={{}}

url과 페이지 만들고 싶으면 1. app 폴더에 url에 들어갈 이름의 폴더 만들고 2. 그 안에 page.js 넣고 3. 그 안에 레이아웃 만들기
page.js 만드는 법 -> component 만들기 -> export default function 폴더명(){ return( <div></div>)}
Link: a태그와 동일(그러나 a태그보다 부드럽게 넘어감)
모든 페이지에 보일 html은 layout.js에 작성(페이지 변경과 상관없이 계속 보여줄 ui는 layout.js에 작성하자)
page.js 보여줄 때 옆에, 상위폴더에 있는 모든 layout.js를 합쳐서 page.js 싸맴

map((a,i) => { return }) - a: array 자료 출력, i: 반복 횟수 -1 //// return에 적은 걸 array 안에 담아줌
JSX에서 array 안에 담긴 자료들이 html태그들이면 잘 보여줌

map 반복문 사용시 key={유니크한 값} 넣으면 좋음 (반복 생성되는 html 태그들마다 유니크한 값을 넣어줌으로써 구분하기 쉬워지는 거임 그래서 보통 i로 마니 씀)
이미지는 public 폴더에 저장함
public 폴더는 사이트 root 경로로 이동하기 때문에 별다른 경로 지정 없이 /로 이동 가능
최적화된 이미지 사용: <Image src={} /> (next/image) (단, src 안의 경로는 무조건 import 형태)
반복문을 통해 불러오는 이미지들은 좀 귀찮을 수 있음
Image로 외부 이미지를 불러올 때는 width와 height 속성을 따로 지정해줘야 함 + next.config.js 셋팅도 필요함
최적화는 보통 다 만든 후에 하는게 좋음

길고 복잡한 html을 한 단어로 축약하면 component
component 제작: 1. function 작명(){ return( 축약할 html)} 2. <작명 />
component 단점: component끼리 데이터 공유 귀찮음
재사용이 잦은 html 덩어리들을 component로 제작할 것
nextjs 컴퍼넌트 종류 : server component, client component
아무거나 대충 만든건 server component, 파일 맨 위에 'use client' 넣고 만든 건 client component  
차이점? server component에는 html에 js 기능 넣기가 불가능함(useState, useEffect 등 다 불가능) client는 가능함
server component: 로딩 속도 빠름, 검색엔진 노출 유리
큰 페이지는 server component, js 기능이 필요한 곳만 client component
export default는 한번만 사용 가능
여러 개를 export하려면 export{변수/함수명} (단, import할 때도 {}형식으로 import 해야함)

props는 함수 파라미터랑 비슷함(용도가 거의 같음)
props: 부모에서 자식으로만 전송 가능
데이터가 많은 컴퍼넌트가 필요하면 그들 중 최고 부모 컴퍼넌트에 보관하는 것이 좋음
보통 fetch()로 DB데이터 가져옴
같은 데이터 요청이 여러개면 1개로 압축해줌(deduplication)

state 사용할 때 state 값이 변경되면 state를 사용하는 html 부분이 자동으로 재랜던링됨
state 변경 함수 사용시 새state == 기존 state일 경우 변경 불가

mongodb 사용할려면 mongodb 라이브러리 사용
.connect 여러번 실행되면 서버한테 부담이 되기 때문에 따로 빼야 함
nextjs 폴더에서 util/database.js 만든후 해당 파일과 같이 코드 작성
nextjs 특징: 개발 시 파일 저장하면 모든 js 파일의 코드를 다 읽고 지나감
db 입출력 코드는 server component 안에서만 쓰자(client component에 있는 코드들은 모두 client한테 전달이 되기 때문에 민감한 정보들을 줄 수 있음)

첨보는 프로그램 만들기 => 프로그램에 필요한 기능 전부 정리 => 쉬운 기능부터 하나씩 개발
첨보는 세부기능 만들기 => 어떤 식으로 동작하는지 상세하게 설명 => 코드로 번역
Promise를 뱉는 코드에만 await 적용 가능(await 적용시키면 오래걸리는 코드들도 기다려줌)
{return( <></> )} => <></>

Dynamic route 폴더: 원하는 route 주소/[들어갈꺼 작명]
_id를 고치지 않고 objectId를 사용할려면 mongodb에서 import 해와야 함
유저가 dynamic route 자리에 입력한 값을 'props.params.폴더명'을 통해 출력 가능

페이지 이동방법은 많음
useRouter: 'next/navigation' (client component 안에서만 사용 가능)
왜 useRouter 사용함? Link보다 옵션이 많음
push(목적지): 목적지로 이동, back(): 뒤로가기, forward(): 앞으로가기, refresh(): 바뀐내용만 새로고침, prefetch(목적지): 페이지 미리로드
Link 태그에도 prefetch 기능이 내장되어있음
prefatch 기능 끄고 싶으면 prefatch={false로 끄셈}
prefatch 기능은 개발중에는 확인할 수 없음
usePathname(): 현재 url 출력
useSearchParams(): Search parameter(query string) 출력
useParams(): 유저가 [dynamic router] 입력한거 출력

글작성페이지를 만들 때 클라이언트와 db 사이에 프로그램(서버)를 놔두고 검사한 후 보냄(3-tier-architechture)
nextjs에서 서버기능 만들기: 1. app폴더안에 api폴더에서 서버짜기 (신기능인데 나사가 좀 빠져있음) 2. pages폴더 안에 api 폴더에서 서버 짜기(권장)
pages 처음 만들었으면 미리보기 껐다 키셈
서버는 기능실행 후 유저에게 응답해줘야함
서버기능 처리 성공시엔 status(200)
서버기능 처리 실패시엔 status(500)
(유저의 잘못에 의해) 서버기능 처리 실패시엔 status(400)
서버로 POST method 요청하려면 가장 쉬운 방법은 form 태그 쓰기
응답과 동시에 페이지 이동시키려면 redirect(302, '/경로')
db 에러 예외처리는 try catch

글 수정 => 작성이랑 다를 바 없는데 글을 가져와서 채워넣어야 함
input에 미리 값을 넣고 싶으면 defaultValue 속성 사용하셈
서버에 없는 정보는 유저에게 보내라고 하거나 db에서 꺼내거나

컴퍼넌트 구조가 복잡해질 수록 props로 불러오는 것보단 직접 컴퍼넌트에 db의 데이터를 가져오는 방식이 편할 수 있음
client component에서 db 데이터 가져올려면 useEffect 사용하셈
client component에서 직접 db 데이터를 가져오기에는 위험부담이 크니까 서버한테 부탁해서 db 데이터를 가져오기
useEffect 사용하면 html을 다 랜더링해주고 그 다음 실행되기 때문에 검색 노출에 어려움을 겪을 수 있음
검색 엔진에 친화적인 페이지를 만들고 싶으면 props를 사용하는 쪽이 좋음
코드 로직을 짜는 거를 배워가야함
props 편하게 쓰고 싶으면 파라미터에 props 말고 {작명}을 넣으면 props.작명 안 쓰고 작명으로 바로 쓸 수 있음
ajax 사용해도 서버로 요청 가능함
fetch('url') => url로 get 요청
form 태그 사용하면 항상 새로고침되는데 (next.js는 간혹 아닐수도 있음) ajax 사용하면 새로고침 안 함
요청 완료시 코드 실행은 .then()
다른 http 요청은 fetch('url', {method: '요청', body: 데이터}) (숫자나 문자는 걍 그대로, array나 object는 JSON.stringify(data))
json 자료의 속성들을 가져올려면 parsing 과정이 필요함
delete 요청시 데이터가 전달이 잘 안 되면 post로 보내도 됨
ajax 요청 완료시 서버가 보낸 데이터를 출력하고 싶으면 .then((r) => {retunr r.json()}).then((r) => {console.log(r)})
ajax에서 에러가 나는 경우 1. 서버가 status 500을 보내는 경우(status 코드가 200이 아닌 경우), 2. 네트워크 에러인 경우(catch문)
axios 라이브러리 같은 거 쓰면 ajax 짧아짐
.then((r) => {if(r.status == 200) {return r.json();} else {//서버가 에러코드 전송 시 실행할 코드}}).then((result) => {//성공시 실행할 코드}).catch((error) => {//실패시 실행할 코드 //console.log(error);})
서버로 데이터를 보내기 위해서 fetch는 body를 넣고, form 태그는 input 태그 안에서 보내기로 함
쿼리스트링 써도 서버로 데이터 전송 가능함
쿼리스트링 쓰면 간단하고 get 요청으로도 데이터 전송이 가능함
단점이라면 데이터가 길고 많으면 더러워질 수 있고, url에 데이터가 노출되기 때문에 민감한 거 못 보냄
url 파라미터 문법으로도 서버로 데이터 전송할 수 있음

기능 구현 다하면 뭐함?
성능 올려야지요?
프로젝트 배포할려면 1. 터미널 통해서 빌드하셈 2. npm run start 쓰면 실제 서버 작동시킬 수 있음
동그라미: static rendering, 람다: dynamic rendering
웬만한 페이지들은 static rendering해줌(디폴트값)
static rendering 페이지들은 npm run build 할 때 만든 페이지를 그대로 유저에게 보여줌(페이지 안에 기능이 없기 때문)
미리 페이지 완성본을 만들었기에 전송 속도가 빠름
dynamic rendering 페이지들은 유저가 페이지에 접속할 때마다 html을 새로 만들어서 보내줌
근데 가끔씩 이상한 빌드 과정이 생겨서 dynamic rendering이어야 하는데 static rendering으로 되는 경우도 있음
이거 고칠 수 있어야함
dynamic rendering으로 바꾸고 싶으면 export const dynamic = 'force-dynamic' 적으셈
static rendering으로 바꾸고 싶으면 export const dynamic = 'force-static' 적으셈
dynamic rendering의 단점은 뭐임? 맨날 html을 다시 그리니까 서버랑 db 부담이 커질 수도 있음
그럼 어케함? 캐싱으로 부담을 줄이셈
캐싱이 뭐임? 결과를 잠깐 저장해두고 재사용하는 거임
페이지를 캐싱한다는 건 페이지 완성본을 잠깐 저장해놓고 재사용하는 거임
get요청 결과도 캐싱할 수 있음 fetch('url', {cache: 'force-cache'})
이러면 결과를 몰래 저장해두고 재사용할 수 있음
근데 사실 그냥 fetch만 써도 cache를 지원함. cache를 안 쓰고 싶으면 'no-store'라고 적으면 됨
{next: {revalidate: 60}} => 60초마다 캐싱된 데이터 갱신해줌
캐싱된 데이터는 하드용량을 차지함
db 출력 결과도 캐싱이 가능함 1. 기능을 fetch로 바꾸거나 2. revalidate 예약 변수를 사용해서 페이지 단위로 캐싱하거나
export const revalidate = 원하는초단위시간 => 누가 페이지 방문시 적은 시간동안 페이지가 캐싱됨. 적은 시간이 다 지나면 재캐싱됨(ISR이라고 불리던 기능)

회원기능은 어떻게 만듬?
1. 아이디 비번을 db에 저장해둠 2. 로그인하면 아이디 비번을 서버에 보내고 3. 그걸 서버가 db에 있는지 확인하고 4. 확인되면 입장권을 보내줌 
5. 데이터를 요청할 때 서버한테 입장권을 보내주고 입장권에 아무 문제가 없으면 로그인시켜주는 거임
여기서의 입장권은 유저 정보가 쓰여진 문자 정보임
유저한테 입장권을 보이지 않게 숨김 => 쿠키 저장소에 숨겨져있음
입장권 만드는 방식에는 1. session 방식 2. token 방식이 있음 이중 택1 하셈
session 방식에는 session id만 적혀있음
db에 아이디, 로그인 날짜, 유효기간, session id 등을 다 저장하고 유저한테 session id가 적힌 입장권을 줌
이후 유저가 로그인을 시도했을 때 session id를 통해 찾은 db의 정보에 별 이상이 없으면 통과시켜주는 방식
session의 장점은 하나하나의 요청마다 엄격하게 검사할 수 있지만 db에 부하가 올 수 있음
유저가 많은 웹페이지를 만들 때는 session id 보관용 db로 redis를 사용하는 경우도 있음(입출력이 빠른 db)
JWT token 방식은 입장권 안에 모든 정보들을 다 적고 암호화해서 보냄(db에 보관하지 않음)
입장권을 서버가 보고 확인해서 알려줌
보안상의 문제가 생길 수 있는 거 아님? 유저가 위조해서 보내면 어캄? 근데 그건 걱정 안해도 되는게 암호화하기 때문임
장점은 db가 필요없기 때문에 부담이 적고, 그래서 유저가 많거나 MSA 운영하면 편함
대신 단점으론 token을 누가 쌔벼가거나 그러면 다른 컴퓨터에 존재하는 입장권을 소멸시킬 수 없어서 로그인을 막을 수 없고, 다른 컴퓨터 강제 로그아웃 기능도 없음
해결책이 있긴 함. 나쁜 입장권 목록을 적어서 조회할 수 있긴 한데 이건 session 방식이랑 다를게 뭐임?
OAuth라는 것도 있음
얘는 입장권이 따로 있는 건 아니고 사용권한을 다른 페이지에서 대여해오는 방식임
A사이트의 회원정보를 B사이트에서 불러와서 사용가능함 + 회원가입도 가능함(=social login)
예를 들어 카카오톡, gmail 등이 있음
근데 사실 next.js에서는 회원기능은 라이브러리 설치하고 코드만 잘 짜보면 됨
단점이라면 아이디/비번 로그인시 JWT를 강제로 사용해야하고 session 방식을 사용할 수 없음
왜 그렇냐고 물어보면 개발자가 직접 아이디 비번 만질 수 있으면 보안 문제 생길 수 있으니 문제 안 만들려고 그런다고 함

소셜 로그인 사용하면 아이디, 비번 관리할 필요 없고 라이브러리 쓸 거라 코드 짤 것도 없음
github: settins -> developer settings -> OAuth Apps
개발중일 때는 localhost:3000(미리보기 url) 적으면 됨
그러면 client ID랑 PW 얻을 수 있을 거임
npm install next-auth@4.21.1
next-auth 셋팅: pages/api 안에 auth 폴더 생성하고 그 안에 [...nextauth].js 파일 생성
그 파일 안에 구현하고 싶은 로그인 방식 정할 수 있음(다수 선택도 가능) (next-auth 설명서 참고)
Provider: 로그인 방식 하나
라이브러리 안에 signIn() 함수 사용하면 곧바로 로그인 페이지로 넘어감
로그인이 된 상태면 유저 정보를 출력해보자
server component에서 유저 정보 출력할려면 await getServerSession(authOptions) 쓰셈(서버 컴퍼넌트나 서버 기능에서 사용 가능)
jsx 문법 안에서는 if 사용하고 싶으면 삼항 연산자 사용하셈
위 라이브러리 사용하면 기본 default 방식이 JWT임
근데 JWT가 싫을 수도 있는거 아님? 그럼 session 방식을 도입할 수 있음
그건 어떻게 함? DB adapter 사용하면 됨
1. 첫 로그인시 자동 회원가입을 시켜주는데 정보들을 db에 보관함 2. 로그인 시 db에 세션정보를 보관함 3. 현재 로그인된 유저 정보 필요하면 db 조회함
npm install @next-auth/mongodb-adapter(에러나면 mongodb 라이브러리 uninstall 시키고 npm install mongodb@4로 설치한 후 다시 시도해보셈)
셋팅도 필요함 [...nextauth].js 파일 들어가서 adapter: MongoDBAdapter(connectDB) 적으셈
다른 db 쓰려면 다른 db adapter 찾아서 사용 가능함
mongodb 들어가면 새로운 collection 있을 거임
1. sessions: 현재 로그인된 유저 세션정보 저장용 2. users: 가입된 유저정보 3. accounts: 가입된 유저의 계정정보(나뉘어져 있는 이유는 한 명이 한 개의 계정으로 여러 개의 사이트에 가입할 수 있기 때문에)
email이 같으면 같은 유저로 간주함
다른 database에 유저 정보 저장하려면 url에 원하는 데이터베이스를 지정해주면 됨
본인이 쓴 글만 수정/삭제하는 기능을 추가할 수 있을 거 같음
서버 기능에서 현재 로그인된 유저의 정보를 알고 싶으면 let session = await getServerSession(req, res, authOptions)

난 소셜로그인 말고 클래식하게 아이디, 비번으로 로그인하고 싶다하면 그것도 구현 가능함
근데 대신 저거 사용하면 session 사용 못하고 JWT로 강제됨
대신 회원가입 기능을 우리가 직접 만들어야 함
비번은 암호화해서 저장하셈(bcrypt 라는 라이브러리 사용할 거임)
await bcrypt.hash(암호화할거, 아무숫자) 사용하면 암호화가 됨
빈칸이 있거나 너무 길면 짜르고, 중복된 이메일 체크해주고 하는 기능들 알아서 짜보기
[...nextauth].js 파일에 CredentialsProvider() 적으면 됨
근데 이건 길기 때문에 문서에서 알아서 가져가셈(파일에 상세 정보 적어놨으니 참고하셈)
쿠키들 삭제하면 로그아웃 될 거임
보통 secret 키는 .env 파일에 저장하는게 좋음

next-auth 5버전 나오면 출시되는 JWT refresh token에 대해 알아보자
JWT 토큰의 유효기간이 막 1년 이러면 나쁜 유저가 이걸 탈취했을 때 방법이 없음
그래서 보통 유효기간을 짧게 하는 경우가 많은데 그러면 유저 입장에서 유효기간 만료될 때마다 재로그인해야 하니 불편할 거 같음
그래서 유효기간이 지나면 자동으로 발급해주는 식으로 코드를 짤 수 있음
서버야 내 입장권 유효기간 지났어, 재발급용 토큰 줄테니 입장권 새로 보내줘 
ok 재발급용 토큰 db랑 맞는지 확인해보고 입장권 보내드림 => 입장권용 토큰 = access token, 재발급용 토큰 = refresh token
refresh token 도난 당하면 똑같은 문제 아니냐라고 볼 수 있는데 얘를 db에 저장하기 때문에 다른 나쁜 사람이 또 사용하는지를 체크할 수 있음
그럼 session이랑 다른게 뭐냐? 사실 거의 같긴 한데 세션보단 db 조회를 덜한다는 이점이 있긴 함