Intellij Community 버전으로 Spring Boot 시작해볼거임
Ultimate도 있긴 하지만 그건 부자 되면 월 2만원 내고 하면 될 듯?
Ultimate 버전은 직접 에디터 안에서 Spring boot 프로젝트를 생성할 수 있지만 무료 버전은 그게 안되기 때문에 
구글 검색창에 Spring intializr 검색해서 들어가기
들어가서 gradle, java 선택하고
spring boot 버전은 괄호 없는걸로 선택하는게 안정적이고
프로젝트 이름도 설정해주고
java 버전은 최신 버전만 아니면 됨
기본 라이브러리는 spring web, spring boot dev tools 두 개 정도 기본적으로 설치해주면 좋을 듯
이거 다운받고 압축 풀면 프로젝트로 사용할 수 있음
코드 짜기 전에 에디터 설정이 좀 필요함
1. file - project structure - SDK 버전을 프로젝트 java 버전보다 높은 버전으로 선택해야 함
2. file - setting - gradle 검색 - build and run using 이랑 run tests using을 Intellij IDEA로 바꾸기
3. setting - java compiler 검색 - input창에 '-parameters' 입력해주기
4. plugin 메뉴에서는 셋팅같은거 해줄 수 있음
src 폴더가 파일 짜는 곳
main/java/../안에 있는 .java파일이 spring boot를 이용해서 웹서버 띄우는 곳
resources는 html css 같은 static 파일 같은 거 넣는 곳
apllication.properties는 설정하는 곳
gradle은 뭐임? 컴퓨터 친화적인 코드로 바꿔주고, 라이브러리 관리해주고, 테스트 돌려주는거
자동으로 해주는 파일임
build.gradle은 많이 보게 될 거임

java 문법 정도는 좀 보고 가야지
코드는 main 함수 안에 적어야 함
java 프로젝트를 실행하면 main 함수 안이 제일 먼저 실행되기 때문임
변수는 어떻게 선언하고 사용함?
변수명Type 변수명 = 값;
String, int, long, float, double, boolean 등등임
타입을 적기 귀찮다면 java 10버전 이상부터는 var로 선언가능함
그렇지만 타입을 명시적으로 적어주는게 제일 좋음
(참고) Kotlin은 var 많이 사용하긴 함
final을 type명 앞에 붙이면 변경 불가능함
조건문은 어떻게 사용함?
if(조건) {} else {}
반복문은?
for(int i = ~; i ~~ ; i~~) {}
함수는 어떻게 만듬?
보통은 class 안에 함수를 만듦
ReturnType 함수명() {~~}

class는 뭐임
변수랑 함수의 보관함이라고 생각하면 편할 듯
class 클래스명 {
  변수
  함수
  ~
}
class 안에 있는 변수나 함수를 쓰고 싶다면 class를 복사해서 써야함
var 변수 = new 클래스명();
변수는 Object 형태로 생겼음
사용법은 object랑 같음
(참고) sout이라고 적으면 System.out.println() 나올거임
var이 아니라 클래스명 으로 적어도 변수 선언 가능함
근데 이건 어디에다 쓸거임? 왜 class를 만들어서 사용하는 거임?
1. java를 선택한 이상 클래스를 강요함
2. 관련 있는 변수 혹은 함수를 한 곳에 정리할 수 있음
3. 중요한 변수, 함수의 원본을 지킬 수 있음
(참고1) new로 복사 안되는 변수, 함수도 제작 가능하고, 복사 안해도 쓸 수 있는 변수 함수 제작 가능함
(참고2) class 안에 있는 변수는 field/attribute, 함수는 method로 불림
constructor는 뭐임?
class를 찍어내는 기계라고 생각하면 될 듯
class 클래스명 {
  클래스명() { // 얘는 new 클래스명() 할 때마다 실행되는 친구임
    this.성질명 = ~~;
  }
}

지금부터는 server 만들어볼거임
일단 Web Server부터 만들어볼거임
class 위에 @Controller 사용하면 SpringBoot 문법 사용됨
그러면 서버 기능을 하는 class 만들어짐
@GetMapping("/")
@ResponseBody
String(보통은 String으로 씀) 함수명() {
    return 유저에게보낼데이터;
}
/로 접속하면 return 옆의 데이터가 뜰 듯
다른 routes는 어케함?
위에처럼 똑같이 하면 될 듯?
근데 main 함수 안에 코드 짜야한다고 했는데 왜 거기 안 짜도 실행이 되는 거임??
Spring 프레임워크 때문임
@Controller라고 붙이면 Spring이 알아서 실행해주는 거라고 생각하면 됨
문자 말고 html을 보내려면 그냥 return 옆에 html을 보내면 됨
근데 보통은 html 파일을 만들어두고 그걸 전송해줄 수도 있음
html 파일은 보통 static 폴더 안에 만들어둠
html 파일을 보내줄려면 경로 넣어주면 됨
(참고) static 폴더가 기본 경로이므로 그거 생각해서 보내면 됨
html 파일을 보낼 때는 @ResponseBody 빼야 함
얘는 문자 그대로 보내달라는 거고, 쟤를 빼면 파일을 보내주세요 라는 뜻인거임

내가 만든 클래스를 다른 파일에서도 쓰고 싶으면
package 경로; 적으면 됨
package com.~.~; 안 쓰면 다른 파일에서 저거 못 씀
public 없으면 같은 폴더 안에서만 사용 가능함
publicd 붙이면 다른 폴더에서도 사용 가능함

html에 서버/데이터베이스의 데이터를 집어넣을 수 있음
템플릿 엔진 사용하면 되는 거임
Thymeleaf 사용해볼거임
build.gradle 열어서 
dependencies에 
implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
적어주셈
그리고 load gradle changes 버튼 눌러주면 됨
라이브러리 설치하면 서버 껐다 켜야함
thymeleaf 어떻게 사용함?
templates 폴더에 만들어줘야함
html에 서버데이터를 넣으려면
1. 파라미터에 Model model 넣고
2. model.addAttribute("전달할데이터이름", "값") 넣어주면 됨
보낸 데이터를 html에서 어떻게 사용함?
태그 안에 th:text="${전달할데이터이름}"

MySQL 데이터베이스 호스팅 사용해볼거임
Azure 사용해서 호스팅 받아볼거임
database browser라는 플러그인 설치해서 사용하는중

database를 새로 만들고 싶으면 console에서 
create database 데이터베이스명;
그냥 SQL문 짜면 됨
혹은 DBeaver 같은 걸로 새로 하나 만드셈
보통 table은 서버에서 SQL문으로 코드를 짜서 만드는게 일상임
이거 할려면 라이브러리 필요함
runtimeOnly 'com.mysql:mysql-connector-j'
implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
요거 두개 build.gradle dependencies에 넣고 load gradle changes누르면 됨
위에거는 MySQL 접속 도와주는 라이브러리
밑에거는 ORM 라이브러리임
ORM: 자바 코드로 SQL문을 대신 짜줌 + 뽑은 데이터 타입 체크도 편함 등등
but 데이터 입출력 설치가 느릴 수도 있음
JPA: 자바의 ORM의 표준 문법
Hibernate: JPA 쓰기 좋게 구현한 라이브러리 (지금 설치하는 거임)
설치하면 셋팅도 필요함
application.properties에 설정들 넣어주셈

테이블 만들고 싶으면
JPA에선 @Entity 클래스 하나 만들면 됨
그러면 클래스명으로 Entity가 하나 생김
테이블에 어떤 컬럼이 들어갈지 정의해줘야 함
컬럼을 만드는 법은 그냥 변수를 하나 만들면 됨
컬럼용 변수에서는 int 말고 Integer로 쓰라고 강요하니 이거 써야할 듯
Integer는 20억까지 저장가능함
이거 넘는 숫자는 long 타입 쓰면 됨 얘는 900경까지 가능함
대신 long은 숫자 쓰는 법이 따로 있음
키 컬럼에는 @Id를 위에 적어줘야 함
auto increment기능을 원하면 @GeneratedValue(strategy = GenerationType.IDENTITY)
(참고) @Entity 변수들에 public을 붙이면 다른 모든 클래스에서 문제 없이 사용 가능함
안 붙이면 같은 폴더 내의 패키지 내에서만 사용가능함
근데 public을 남발하면 안 좋지 않을까?
그런 친구들은 private로 설정해주는게 좋지만 그 변수들은 getter, setter 함수로만 변경 가능함
(참고2) @Column()으로 컬럼에 제약 설정 가능함
nullable (컬럼 비면 입력 막는 설정)
unqiue (컬럼 안의 데이터들은 유니크해야하는가에 대한 설정)
columnDefinition (Varchar(255)를 뚫는 Text 타입으로 지정할 수 있음)
length (Varchar의 길이 설정)
(참고3) 그런데 컬럼 설정 변경사항은 DB에 반영이 자동으로 안 될 수도 있음
그럴 때는 테이블을 삭제하고 다시 만드는게 좋음
결론: 처음 만들 때 잘 만드는 게 좋음

Lombok 라이브러리 설치해봅시다 (코드 자동생성 라이브러리임)
compileOnly 'org.projectlombok:lombok'
annotationProcessor 'org.projectlombok:lombok'
플러그인도 설치해주고
annotationProcess라는 항목에서 체크 하나 해주면 됨
jpa로 데이터를 입출력하려면 3스텝 필요함
1. repository 만들고
같은 폴더 하나 만드셈 대신 이번에는 interface로 만들기
클래스명 옆에
extends JpaRepository<엔티티명, id컬럼타입> 사용해야 함
interace 만들면 같은 이름으로 클래스도 만들어줌
대신 그 안에는 db 입출력 함수들이 막 들어있는 구조임
2. 원하는 클래스에 repository 등록하고
db 입출력을 원하는 곳으로 가서 
클래스명 위에 @RequiredArgsConstructor 써주고
private final 인터페이스명 변수명; 으로 등록해주셈
3. repository.입출력문법() 사용하기
그냥 사용하면 됨 이건
Lombok 없이도 등록할 수 있긴 한데 그건 나중에 찾아보셈
.findAll() -> 다 찾아오기
.save() -> 데이터 저장하기
findAll로 가져온 데이터들은 ArrayList 형태로 담겨있음
하나만 출력할려면 ArrayList데이터명.get(index번호)
ArrayList랑 LinkedList 등등 여러개 있는데
이 모든 걸 묶는 친구는 List임

thymeleaf에서 th:each 사용하면 반복문 사용 가능함
th:each="작명: ${서버에서보낸데이터명}"
작명에는 서버에서 보낸 데이터가 하나씩 차례대로 들어감

자바로 코드 짜다보면 불편한 점 중 하나가
object만 출력하면 아무것도 안 나온다는 거임
object의 변수들을 한번에 출력할려면 함수를 하나 만들어주셈
그걸 return으로 뱉어달라고 해야 하는 거임
근데 이걸 모든 사람들이 다 이렇게 사용하니까 lombok이 이걸 만들어줌
object 위에 @ToString이라고 적어주면 되는 거임
그러면 sout으로 봤을 때 모든 object 내부가 한눈에 다 보이게 됨

코드 관리를 도와주는 문법들 좀 알아봅시당
이건 java랑 관련된 것들임
Access Modifier라고 불리는 애들임
변수, 클래스, 함수 등 여러 곳에 붙여질 수 있음
public을 붙이면 모든 곳에서 사용 가능함
아무것도 안 붙이면 package-private으로 자동 확정됨
이 친구들은 같은 폴더의 클래스에서만 사용 가능함
private을 붙이면 다른 클래스에서 사용 불가능함
protected라는 걸 붙이면 그냥 아무것도 안 붙인 package-private랑 같음
단 예외사항이 있는데 상속한 클래스는 맘대로 사용 가능함
상속은 객프에서 배운대로 extends를 통해 사용함
잘 사용하지는 않음 좀 복잡하기 때문에
요즘은 상속보단 composition을 더 많이 사용하는 추세임
static을 붙이면 클래스.변수 이렇게 직접 사용 가능함
대신 이렇게 사용하면 클래스를 사용하는 의미가 많이 없긴 함
클래스는 복사본으로 사용하는 게 의미있는 거임
그래서 얘네는 utility용 함수 만들 때 사용하게 됨
사실은 private 붙은 변수도 출력은 가능함
그냥 private 변수를 출력하는 메서드를 따로 만들면 되는거임 => getter함수로 불림
수정도 마찬가지로 메서드를 따로 만들면 되는거임 => setter 함수로 불림
근데 이렇게 만드는 것도 귀찮잖음
그렇다면 lombok에서 만들어준 @Getter, @Setter를 사용하셈
그냥 사용하고 싶은 친구 위에 붙이면 됨
private은 왜 붙이는 거임?
함부로 변경되지 않고 setter 변경하는 것이 더 안전하니까!
근데 setter를 만들어두는게 왜 안전한거임?
setter 자체는 안전한 게 아닌데 그 안에 로직을 넣어두는게 안전해지는거임
나중에 타입을 변환시키고 싶다면?
그것도 setter함수를 통해 변경시킨다면 사용된 모든 곳을 바꾸는게 아니라
setter함수에 로직만 설정해주면 다 되는 거임
이런 디테일들이 대형 프로젝트나 협업에서 도움이 될 수 있음
잘 참고하셈

post, put, delete 메서드 사용할려면
Post,Put,DeleteMapping 사용하면 됨
유저가 폼으로 보낸 데이터를 출력할려면
함수의 파라미터를 잘 사용해야 함
파라미터에 적는 타입으로 넘어가니까 파라미터의 타입을 잘 작성하셈
그래도 안 되면 @RequestParam(name = "input이름") 넣어보셈
원래 저거 써야 하는데 요즘은 생략해도 잘 됨
redirect 시킬려면 return "redirect:/페이지url" 넣어주면 됨
만약 input이 100개면 파라미터도 100개 적어야함?
그래도 되지만 Map 데이터를 사용하면 됨
그냥 Nodejs의 Object랑 같은 형태라고 볼 수 있음
db에 데이터를 넣을려면 새로운 객체로 하나 만들고
그걸 repository명.save()를 통해 넣을 수 있음

input 데이터들을 바로 object로 변환하려면 "@ModelAttribute 객체명 변수명"으로 받을 수 있음
thymeleaf에서도 html UI 재사용할 수 있음
th:fragment 문법임
th:fragment="이름" 이걸 재사용하고 싶은 UI에 넣어두고
이걸 사용하고 싶은 곳에 th:replace="~{파일경로::이름}" 넣어주면 됨
파일 하나에 th:fragment 여러번 사용 가능하고
"이름"을 통해서 변수도 전달할 수 있음

URL Parameter 사용하는 법
그냥 @GetMapping("/경로/{변수명}") 이렇게 만들면 됨
파라미터는 여러개 만들 수 있음
하나의 행만 꺼내는 문법은 뭐임?
Optional 타입이 뭐임?
이 데이터가 비어있을 수도 있고, 특정 타입을 가질 수도 있는 친구들을 그렇게 가리킴
Optional인 친구들은 .get()을 붙여야만 출력 가능할 거임
근데 그냥 .get을 사용하면 위험함
빈값에서는 .get 메서드가 없기 때문임!
그래서 if문을 통해서 걸러주는게 좋음
if(변수명.isPresent())를 붙여서 존재하면 ~~이렇게 해라 라고 하는게 좋음
@PathVariable을 사용하면 url parameters를 받아낼 수 있음

타임리프 설치한 경우에는
error.html 만들어놓으면 자동으로 error.html로 이동시켜줌
그런데 REST API를 사용하는 경우네느 error.html이 의미가 없음
REST API는 ajax 통신으로 데이터만 보내기 때문임
그럼 예외처리 어떻게 해야함?
try catch 문으로 감싸는게 기본적인 방법임
try {

} catch(Exception e) {

}
배포할 때는 Exception 출력보단 로깅 라이브러리를 사용하는게 좋음
(참고) try catch 없이 throw new Exception 그냥 쓰면 뭐라함
그럴때는 함수명 옆에 throws Exception 적어야 함
근데 그냥 try catch를 쓰는게 좋아보임
catch문 안에서는 redirect가 안 먹을 수 있음
그럴때는 그냥 에러 메세지를 프론트한테 넘겨주는 게 좋음
에러 코드도 기입해주면 디버깅할 때도 도움이 될 듯
status 코드 보내줄려면 return ResponseEntity.status(에러코드).body("에러메세지")
이거 쓸려면 함수 return 타입을 ResponseEntity<String>으로 바꿔주는게 좋음
유저 잘못이면 4XX, 서버 잘못이면 5XX, 성공했으면 200 씀
이런거 찾기 귀찮으면 HttpStatus.에러이유 올리면 알아서 spring이 가져다줌
모든 에러를 캐치해주는 스프링 문법도 있음
@ExceptionHandler(Exception.class)
public void handler() {

}
같은 클래스 안의 API 들에서 에러가 나면 위의 핸들러가 작동할 거임
return ResponseEntity.status().body() 하면 되겠죠?
그런데 컨트롤러 파일이 많아지면 어떡함?
모든 controller 파일의 에러를 캐치하려면
java 파일 하나 만드셈
이름은 맘대로 지으시고
클래스 위에 @ControllerAdvice를 넣어주면 됨
그리고 그 안에 @ExceptionHandler 저 코드 넣어주면 모든 파일에서 작동함
에러 종류마다 다른 코드도 실행시킬 수 있음
그럴때는 Exception이 아니라 에러의 종류를 그 자리에 넣어주면 됨
콘솔에 뜨는 에러 종류로 이름 파악할 수 있음

하나의 함수 안에는 하나의 기능만 넣는 것을 권장함
Controller는 보통 데이터나 html 보내는 역할을 함
하나의 클래스에는 비슷한 기능의 함수들만 보관하는게 좋음
보통 서버에서 데이터를 보내기 전에 검사하거나, db 입출력하는 걸 비지니스 로직이라고 부름
그리고 비지니스 로직을 모아놓은 것을 서비스라고 칭함
서비스 클래스에는 @Service 붙여주는게 좋음
이걸 사용할때는 다른데서 미리 new Class()로 해놓고 재사용하는게 좋음
근데 굳이 코딩할 필요는 없고 spring한테 시킬 수 있음
3step 필요함
1. new Class() 할 클래스에 @Service를 붙이기
2. 그걸 사용하고 싶은 곳에 변수로 등록하기
3. 변수 사용
Dependency Injection(의존성 주입) => new 키워드로 뽑은 다음에 그걸 변수에 집어넣는것
그럼 의존성 주입은 왜하는거임?
1. object 여러개 안 뽑아도 돼서 효율적이고
2. 클래스 간의 커플링을 줄일 수 있음
커플링? 하나의 클래스에서 다른 클래스를 사용하면 연관성이 생김
그걸 커플링이라고 부름
Spring IOC Container / Bean
object를 뽑는 공간 / 그 안에 들어있는 object
@Service를 붙여놓으면 Container에 저장시켜놓고,
그걸 다른 클래스에서 불러서 사용할 수 있는 구조가 되는거임
Service 클래스에서 예외처리를 할려면 그냥 에러를 발생시키는게 좋음
throw new ResponseStatusException(HttpStatus.에러종류, "에러메세지")
요거 사용하면 될 듯

DB 데이터 수정 기능 배우기
save를 통해 데이터를 넣을 때
이미 있는 컬럼의 내용이 있으면 자동으로 수정해줌

AJAX?
웹페이지에서 서버로 요청 날리는 법
1. 주소창에 URL 적기 (get)
2. form 태그 전송(get, post)
3. ajax (get, post, put, delete 등)
ajax: 새로고침 없이 서버로 요청 날리는 js 코드
ajax  사용할 때 세부설정이 가능함
method - http request 방법
body - 서버로 보낼 데이터
array나 object로 보낼 때는 json화 시켜서 보내야 함
headers도 추가해주는게 좋음
headers: {'Content-Type': 'application/json'}
ajax에서 넘어온 데이터들은 @Requestbody 안에 담겨있음
파라미터 타입 앞에 붙여주면 됨
query string 사용해서 데이터 보낼 수도 있음
query string으로 보낸 데이터를 출력하고 싶으면 @RequestParam 데이터타입 데이터명

Authentication
내가 아는 Session, Token 방식 그대로임
Session은 Session id만 적혀있음
서버에 로그인 요청하면 DB에 아이디, 로그인 기간 등등을 저장해놓음
그리고 서버가 유저한테 session id를 하나 넘겨줌
다음부터는 유저가 로그인 요청할 때 session id를 넘겨주면 db에 있는지 확인하고 마무리하면됨
장점은 유저의 get/post 요청을 할 때마다 확인하니까 로그인 상태를 수시로 체크할 수 있음
단점은 db가 좀 힘들수도? 그래서 Reddis 같은 Ram을 사용하는 db에 저장시킴
Token에는 내용이 좀 많음
로그인 요청하면 db에 들어갈 내용을 암호화시켜서 token에 적고 그걸 서버가 넘겨줌
다음부터 서버한테 로그인 요청할 때 token 넘겨주면 그거 확인해서 보내줌
장점은 db 조회가 필요가 없음 그래서 유저가 많거나 MSA 구조에서 좋을 듯
OAuth도 있음
다른 사이트에서의 권한을 대여하는 걸 정하는 규칙임
카카오, 페이스북 등이 OAuth로 사용자의 정보를 대신 넘겨주는 거임

Spring에서는 Spring Security를 자주 사용함
implementation 'org.springframework.boot:spring-boot-starter-security'
implementation 'org.thymeleaf.extras:thymeleaf-extras-springsecurity6:3.1.1.RELEASE' 
위에 2개 build.gradle에 넣어주면 될 듯
Spring Security 6버전 사용함
처음 라이브러리 설치하면 모든 사이트의 경로들이 로그인 화면으로 막힘
콘솔 잘 보면 초기 비번이 있음
아이디에 user 넣고 비번에 그거 넣으면 해결되긴 함
근데 모든 경로에 다 로그인 화면을 걸 것은 아니기 때문에 그게 싫으면 아래처럼 하셈
@Configuration, @EnableWebSecurity annotation 넣어주면 설정 건드릴 수 있음
그중에서 SecurityFilterChain 넣으면 어떤 페이지에 로그인 화면 넣을지 정할 수 있음
CSRF 보안기능도 끄셈
CSRF? 다른 사이트에서도 우리 사이트로 링크를 바꿀 수 있는데 그걸 CSRF라고 부름
JWT 입장권을 직접 fetch의 headers 부분에 넣으면 굳이 CSRF 안 꺼도 됨
JAVA에서 Arrow Function 사용할려면 -> 이거 써야 함
이외에는 사용법이 같음
Java에서는 bcrypt를 기본적으로 제공해줌
new BCryptPasswordEncoder().encode("문자") 여기 안에 랜덤 문자열이 남아있게됨
Hashing의 특징
1. 같은 문자 해싱하면 똑같은 결과가 나옴
2. 원래 문자를 추론하는게 거의 불가능함
3. salt도 자동 추가해줌

누가 만들어놓은 클래스를 DI로 쓰고 싶으면 
함수를 하나 만들고 그 위에는 @Bean,
함수를 감싸고 있는 클래스 위에는 @Configuration 붙여주면 됨
그러면 그 함수는 Bean으로 작동함
그리고 그걸 사용할 곳에 가서 등록하고 쓰면 됨

Spring Security 사용하면 셋팅만 해주면 로그인 기능 완성됨
1. 로그인 페이지 만들기
2. 폼으로 로그인하겠다고 설정하기
3. DB에 있던 유저 정보 꺼내는 코드 작성하기
로그인 페이지 작성할 때는 Spring Security가 시키는대로 form 태그 작성해야 함
그다음 설정 넣는 SecurityConfig 파일에 밑에 코드 넣어주면 됨
http.formLogin((formLogin) -> 
  formLogin.loginPage("/login").defaultSuccessUrl("/")
);
로그인 url은 /login, 성공하면 /, 실패하면 /login?error로 감
실패시 url은 default값으로 작동하며 내가 직접 넣을때는 defaultFailUrl 넣으면 됨
db에 있던 유저 정보 꺼내는 코드 적을 파일 하나 만들고
밑에 코드 넣어주셈
@Service
public class MyUserDetailsService implements UserDetailsService {
  @Override
  public UserDetails loadUserByUsername(String username) throws UsernameNotFoundException {
    DB에서 username을 가진 유저를 찾아와서
    return new User(유저아이디, 비번, 권한);
  }
} 
기본적으로 Spring Security가 유저가 제출한 비번과 DB에 있던 비번이 같은지는
알아서 검사해주지만
DB에 있던 비번이 어디에 있는지는 모르기 때문에 그걸 찾아주는 코드는 작성해야함
interface & implements
interface: 함수 정의만 넣는 class (클래스 생김새 가이드라인)
implements: A라는 클래스가 B라는 interface를 그대로 따라가는지 확인해주세요
파라미터인 username에는 username이 적혀있음
이번에는 username이 들어있는 행을 찾아와야 함
repository에서 findBy컬럼명 으로 함수 만들어놓으면 진짜 그걸로 찾아주는 함수 만들 수 있음
사이에 All 붙이면 다 가져와줌
Derived query methods라고 부르는 행위임
말고도 할 수 있는 기능이 많으니 나중에 찾아보기
권한 넣는 법은 코드 참고하셈
로그인한 유저만 볼 수 있는 페이지를 만들려면
Controller에서 Authentication auth를 통해서 
현재 유저의 로그인 정보를 출력할 수 있음
그거를 기반으로 코드 작성하면 됨
타임리프 문법 쓰면 굳이 서버에서 로그인된 정보 안 보내줘도
자기가 로그인된 유저 정보를 확인할 수 있음
로그아웃은 아래 코드를 SecurityConfig에 넣어주면 됨
http.logout(logout -> logout.logoutUrl("/logout"));
/logout으로 get요청 날리면 로그아웃 자동으로 됨
그런데 Authentication auth를 통해서는 현재 유저의 username, 권한만 들어있음
displayname 같은 거 수정하고 싶으면?
그러면 username 꺼내서 DB 뒤지면 되지만 비효율적임
그러면 왜 displayname이 왜 없을까?
loadUserByUsername에서 return에 displayname이 없기 때문임
그러면 원래 있던 클래스를 바꾸기는 힘드니
내가 직접 만든 클래스를 return 시키면 될 듯
그래서 그것과 비슷하게 만들 수 있는 extends 키워드 사용하면 될 듯
Object는 모든 타입의 상위버전임
그래서 타입을 지정하기 불분명할 때 자주 사용함
타입 캐스팅해서 내가 원하는 타입으로 바꾸면 될 듯?
그냥 변수 값 앞에 (원하는타입) 붙여주면 됨
(참고1) 로그인 후 세션 유지기간을 맘대로 설정할 수 있음
(참고2) 세션 데이터를 DB에 안전하게 보관할 수 있음
spring-session-jdbc 사용하면 편함

object를 보낼 일이 굉장히 많음
근데 이 object를 변경해서 보낼 일도 많을거임
(참고) 한글 인코딩이 깨지면 utf-8 인코딩 쓰거나 ResponseEntity 사용하셈
변경하려면
1. map 자료에 필요한 것만 넣거나
2. 새로운 object를 만들어서 필요한 것만 넣거나
2번째 형태를 새로운 클래스로 만든 것을 
Data Transfer Object (데이터 변환용 클래스) - DTO 라고 부름
(참고) constructor 문법 사용하면 object 선언하는 것도 깔끔할 듯
object를 json 형태로 변환시켜서 보내줄 때 
public이 안 붙어있으면 json화가 안됨
public을 붙이거나 Getter 붙이거나 
DTO 파일은 별도의 java 파일로 분리해서 넣기
DTO를 사용하면 장점은?
1. 보내는 데이터의 타입 체크가 쉬워짐
2. 재사용이 쉬움
(참고) Mapping 라이브러리(MapStruct) 쓰면 Object 변환 쉬워짐

Pagination
PageRequest.of(page번호, 페이지당 몇 개)
page번호는 0부터 시작함
위에서 정해진 개수만큼 가져오는 거임
page 변수의 .getTotalPages()로 페이지 몇개인지 확인 가능함
(참고) 전체 페이지 개수 필요 없으면 Slice 타입으로 주면 됨

보통 이미지는 하드에 저장하고, 이미지 경로를 DB에 저장하는 편임
근데 배포할 때 좀 부담스러울 수 있음
그래서 보통은 이미지 클라우드 서비스를 사용하는 편임
AWS S3 사용합시당
서버에 AWS 라이브러리 설치해서 사용할거기 때문에 access key가 필요함
이미지를 보내는 법
1. post 요청으로 이미지를 서버로 보내고 그걸 클라우드에 저장하거나
2. Presigned URL 방식 - 서버를 안 거치고 유저가 직접 S3에 넣거나
근데 안 거치면 위험하니 서버한테 허락을 받고, 허락 받은 이미지에
Presigned url을 발급해서 그걸 S3에 업로드하는 방식임