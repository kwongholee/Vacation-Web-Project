데이터베이스를 정리해봅시당
1. key-value: key랑 value 형태로 저장(서브용 db로 사용함) ex> redis(램에 저장하는 형태라 ㅈㄴ 빠름)
그래서 보통 redis는 메인 db에 저장을 하다가 자주 꺼내쓰는 데이터는 redis에 저장을 하고 꺼내달라할 때 redis에서 꺼내줌
자주 사용하는 데이터 캐싱, 등등
2. Relational DB: 관계형 디비, table(표)로 데이터를 저장함, 걍 Excel임 ex> Oracle, MySQL 등
점유율이 ㅈㄴ 높음
얘 쓸때는 SQL이라는 언어 사용해야 함 + 데이터 정규화를 지켜야 함
ACID Transaction 기능이 있어서 정확도가 매우 중요한 서비스라면 얘 쓰면 됨
3. Graph DB: 관계를 표현하고 싶으면 얘 쓰면 됨 ex> neo4j
노드라는 걸 만들고 거기 안에 데이터를 저장함. 특이점은 노드끼리의 관계를 저장할 수 있다 + Graph Query Language라는 걸 사용해야 한다
비행기 노선, SNS 친구 관계, 코로나 전염맵, 추천 서비스 등등에 사용함
4. Document DB: 관계형 DB보다 더 자유로움 ex> MongoDB, CouchDB, Cloud Firestore 등
collection이라는 폴더 안에 Document라는 파일들 안에 json형태로 데이터를 저장함
갑자기 구조 바뀌어도 에러 안 남 + 정규화를 안 함(중복 내용 제거 X) + 대부분 분산처리 매우 잘함
5. Column-family Database: 표로 저장하고 싶은데 유연하게 사용하고 싶으면 쓰셈 ex> cassandra, Google cloud Bigtable 등
table 안에 row 안에 데이터를 저장함 근데 SQL 언어를 안 쓰고 자기만의 언어를 씀 + 복제, 분산처리 잘해줌(근데 복제를 하면 데이터 일관성이 부족해짐) + 정규화 X
시간 기록도 잘 해줌
6. Search Engine: index 보관에 특화됨 ex> elastic, Amazon CloudSearch 등
index: 빠른 검색 도와주는 목차 같은 거임
실시간 검색어, 추천 검색어, 검색어 오타교정 등에 사용됨

DBMS(Database Management System): 데이터베이스 관리해주는 프로그램
dbms 쓰면 1. 데이터 입출력 쉬워짐 2. db 접속 계정 발급 가능 3. 백업도 쉬움
가벼운거 좋아하면 custom으로 옵션 설정하셈
server: 우리가 아는 db 본체, workbench: 포인트 앤 클릭 만으로 db 조작 가능
root 계정 패스워드 설정한거 기억해둬야 함(sandbox149883!)
window service로 등록하기 무조건 체크해야함!
mysql 사용하려면 workbench 실행하면 됨
존재하는 서버 누르면 MySQL 서버 띄울 수 있음(서버 띄워놔야 db 조작 가능함)
데이터 조작시 mysql workbench 이용해도 되고 터미널 이용해도 되고 DBeaver 이용해도 되고
DBeaver: 깔끔하고 쉽고 다른 DBMS 연결도 쉬움
DBeaver 실행해서 MySQL 연결해놓으면 됨

DBeaver 같은 GUI 툴 쓰는게 편함
Database: 폴더 & table: 파일
table을 만들고 싶으면 table이 어케 생겨먹었는지 미리 작성해야 함
== table에 어떤 컬럼(세로줄)이 들어갈 지 정해야 함
컬럼의 Data type 잘 골라야함 => 컬럼에 저장할 데이터 종류(숫자: INT, 문자: varchar(100))
Data type 정리
문자 -> 젤 마니 사용하는 건 Varchar / 긴문자 저장시 LongText, MediumText / 정말 간단한 문자 저장시 char 사용하긴 하는데 용량 손해때 문에 잘 안 씀
숫자 -> 보통은 INT or BigINT / 소수점까지 저장하고 싶으면 FLOAT, DOUBLE, DECIMAL(<- 요 친구는 소수점 오차가 거의 없음)
날짜/시간 -> DATE, TIME, DATETIME(얘를 젤 자주 사용함), TIMESTAMP
db 마다 전부 data type이 다르니까 알아서 잘 맞추셈

SQL 언어? 데이터베이스 조작에 필요한 언어
데이터 삽입, 출력, 삭제, 수정하는 거임 + 조건문, 반복문, 함수, 변수 등 프로그래밍 가능함
SQL 에디터에 막 프로그래밍 하고 실행할 수 있음
테이블 데이터 출력하는 법 -> select * from 테이블명
테이블의 특정 컬럼만 출력하려면 select 컬럼명 from 테이블명
(취향) SQL 문법들 대문자로 자동완성시키고 시프면 알아서 환경설정하셈
데이터는 출력만 한다고 쓸모가 있지는 않음 가공해야지 => 정렬하셈
출력한 데이터 정렬하는 법 => select 컬럼명 from 테이블명 order by 컬럼명 asc(오름차순)/desc(내림차순) - 기본적으로 오름차순임
order by 카테고리명1 방법, 카테고리명2 방법 == 카테고리명1으로 먼저 정렬, 근데 같으면 카테고리명2으로 정렬

csv 파일 다운 받아서 DBeaver로 옮길 수 있음(파일에 한글 있으면 인코딩 방식을 euc-kr로 바꿔야 함)
원하는 행만 출력하는 건 어떻게 하는 거임?
원하는 행만 출력하는 행위를 '필터링'이라고 함
원하는 행만 필터링할려면 where 조건식(컬러명='값')
조건식에서는 비교연산자 사용 가능
문자 타입 자료 표현할 때는 '문자' / 숫자 타입 자료는 걍 숫자로
(참고) 문자에도 부등호 사용 가능 ('가' < '나' < '다')
컬럼명 between A and B 연산자 : A와 B 사이의 값을 필터링해줌
where 문법은 언제 씀? 행에 필터링을 주고 싶을 때

그럼 조건을 여러 개 넣어서 필터링할려면 어떻게 해야 함?
where은 2개 이상 사용할 수 없음
and / or 연산자를 사용해야 함 (and: 둘 다 만족하면 참, or: 둘 중 하나만 만족해도 참)
SQL 쓸 때 enter 치는 건 상관 없는 데 한 줄이 끝나면 ; 쓰셈
특정 조건을 먼저 확인해보고 싶으면 괄호 사용해서 묶으셈
모든 조건식 앞에 사실 NOT 이라는 연산자를 붙일 수 있음
붙으면 해당 조건에 제외되는 거만 필터링 해주는 거임
not 연산자랑 != 연산자랑 같은 역할인 거임
or 연산자가 너무 많으면 '컬럼명 in (값1,값2,값3,~)' 써도 됨
저렇게 되면 컬럼명이 값1,2,3에 해당하는 친구들 모두 뽑아줌
대신 in 연산자는 하나의 컬럼명에만 국한된다는 것을 참고해야함
order by는 항상 마지막에 작성함(필터링 -> 정렬)

SQL 사용하면 원하는 단어를 검색할 수 있음
컬럼명 like '%값%' : 값이 포함되어 있는 값들 다 보여줌
%, _(wild card): 아무문자 => 아무문자 + 값 + 아무문자
=> %값 = 아무문자 + 값으로 끝나는 단어
%: 0자~무한 / _: 아무문자 1자
%를 문자 앞에 쓰면 성능이슈가 있을 수도 있음(index 활용을 못 함)
%, like 등은 varchar() 컬럼에 주로 사용하며, char() 컬럼에 쓰려면 주의해야 함
ex> char(6) => 가나다를 입력하면 가나다---로 6글자를 강제로 채워서 보내줌 (-는 공백처리)
얘도 조건식임

데이터 분석: 데이터에 의미를 찾는 것 => 통계 내보기 등등
집계함수(aggregate functions)
SQL 짜기 전에 꼭해야 할 일 = 테이블에 뭐가 들어있나 파악해야 함
최댓값, 최솟값 찾으려면 max(), min()
평균 내려면 avg()
합계를 내려면 sum()
현재 행의 갯수를 세려면 count()
as 문법으로 컬럼명 바꿔서 출력 가능함 ex> Max(컬럼명) as 작명 (간혹 as가 필요한 경우가 있음)
일부 행만 골라서 통계내기 가능
distinct 컬럼명 하면 유니크한 값들만 남겨줌(=중복값 제거) + 이 상태로도 통계내기 가능함
사실 max,min 안 써도 최대, 최소 구할 수 있음 => 정렬하면 되잖음 (어떨땐 정렬하는게 더 빠를 때도 있음)
order by 컬럼명 정렬방식 limit 숫자(위에서 숫자개만큼 정렬해줌)

컬럼데이터를 마음대로 조작해서 출력할 수도 있음(사칙연산, 단어바꾸기 등등)
1. 컬럼 출력시 사칙 연산 가능 ex> select 사용금액 * 10, 연체횟수 * 10 from table명
위에서 사칙연산하는 것들은 원본 데이터를 조작하지 않음
2. 컬럼끼리 사칙연산 적용할 수 있음 ex> select 사용금액 / 결제횟수 from card
(당연히 사칙연산은 숫자가 있는 컬럼만 가능함)
3. 문자끼리 이어붙이기 가능함 ex> select concat(컬럼명1, 컬럼명2) from card
concat 안의 파라미터 갯수는 제한이 없으며, 컬럼명 이외에도 직접 문자를 기입할 수 있음
4. 문자의 좌우공백 제거 후 출력하기 = trim(컬럼명)
5. 단어 바꿔서 출력 가능 = replace(컬럼명, 바뀔단어, 바꿀단어) : 바뀔단어가 포함된 모든 단어를 다 바꿈
6. 문자의 일부만 출력 가능 = substr(컬럼명, 몇째글자부터(숫자), 몇자(숫자))
7. 문자의 일부 교체해서 출력 가능 = insert(컬럼명, 몇째글자부터, 몇자, 바꿀단어)

숫자 자료에서 사용되는 함수들
1. greatest, least(숫자 파라미터들) : 하나의 행이나 숫자배열 안에서 최대, 최소를 뽑아줌
2. floor: 소수부분 내림, ceil: 소수부분 올림
3. round(숫자, 자리수), truncate: 숫자를 자릿수까지 반올림, 내림
4. power(숫자, 횟수): 숫자의 회수제곱
5. abs(숫자): 숫자의 절댓값 출력

서브쿼리: select 안에 또다른 select를 뽑는 행위
2개의 쿼리문(SQL 문장)을 하나로 합칠 수 있음
(소괄호 안에 있는 친구) = 서브쿼리
서브쿼리를 먼저 실행한 후 다른 쿼리를 실행함
서브쿼리의 조건
1. 데이터 대신 서브쿼리 넣기 가능 2. 1개의 데이터만 뱉는 쿼리문만 서브쿼리 역할 가능 3. 무조건 소괄호 안에 적어야 함
필수는 아님, 걍 퀴리문 2개 적기 귀찮으면 쓰는 거임
문자나 숫자가 들어가는 곳이면 어디든 서브쿼리 넣기 가능
in() 안에도 서브쿼리 넣기 가능 => 예외적으로 1개 이상의 데이터를 뱉는 쿼리문을 서브쿼리로 사용 가능
근데 실은 나중에 배울 join 문법 써도 됨

데이터에서 의미를 찾고 싶으면 통계를 내는데 전체보단 특정 그룹만 통계를 낼려면 필터링을 거침
그룹지어서 통계를 낼 일이 있는데 where 마니 쓰는 거 귀찮으면 group by를 쓰면 됨
group by 컬럼명: 컬럼명의 유니크한 값을 기준으로 데이터 출력 가능 = 컬럼의 같은 값끼리 모아줌 -> 그 후에 집계함수 사용함
group by 하는 컬럼은 주로 같은 값들이 있는 컬럼들이기에 '카테고리 컬럼'임
group by 결과를 필터링하고 싶으면 'having 조건식' 형태로 사용함(where은 group by 뒤에서 사용 안 함)
where: select from 결과 필터링 / having: group by 결과 필터링

SQL 쓰다보면 가변적인 숫자나 문자 넣을 수도 있음
경우에 따라 다른 값을 뱉을려면 if(조건문, 참이면 뱉을 값, 거짓이면 뱉을 값)
if는 양자택일 밖에 못함, 선택지가 3개 이상이 될 수가 없음
경우가 3개 이상이면 case 문법 사용하셈
case 
  when 조건식1 then 값1
  when 조건식2 then 값2
end
컴퓨터는 윗줄부터 읽다가 조건식이 참이면 오른쪽 값을 남기고 case문을 종료시킴
만약 조건식이 1,2 둘 다 맞으면 어케함? 컴퓨터는 바보라서 맨위에서 만족하는 하나의 값만 남김
마지막에 else 사용 가능
case 
  when 조건식1 then 값1
  when 조건식2 then 값2
  else 값3
end => 조건식1과 2가 모두 참이 아니면 값3을 리턴해줌

SQL코드로 DB, 테이블, 컬럼 생성할 수 있음
데이터베이스 추가/삭제 : create database 이름 / drop database 이름
테이블 생성할려면 테이블을 생성하고자 하는 database의 sql 편집기를 여셈
테이블 생성: create table database명.table명(
  컬럼명 datatype default '디폴트값설정',
  컬럼명 datatype => (마지막 줄에는 , 넣으면 안 됨)
)
데이터 안 넣으면 null로 채워지게 되는데 default 값 설정하면 데이터 안 넣을때 default값으로 설정됨
테이블 삭제: drop table 테이블명
컬럼 추가/수정/삭제: alter table table명 add 컬럼명 datatype / alter table table명 modify column 컬럼명 datatype / alter table table명 drop column 컬럼명
이미 데이터가 존재하는 컬럼은 수정이 불가능함
DDL(Data Definition Language): db, 테이블, 컬럼 생성/수정/삭제 문법
DML(Data Manipulation Language): select 등 데이터를 다루는 문법

컬럼에 제약조건을 걸어서 안전하게 데이터를 보관할 수 있음
1. not null constraint - null 들어오는 거 금지
2. unique constraint - 중복 금지 => 행마다 다른 데이터만 저장할 수 있음
컬럼명 datatype unique || unique(컬럼명1, 컬럼명2,...) => 얘는 unique 함수 파라미터 안에 들어간 컬럼끼리 데이터가 전부 같으면 에러 띄워줌
ex> unique(컬럼명1, 컬럼명2) => 컬럼명1과 컬럼명2의 값이 전부 같아야만 에러 띄워줌
3. check(조건식) constraint - 들어올 데이터의 값 검사 가능
4. primary key constraint - primary key가 뭐임? 행을 구분하기 위해 만든 컬럼 => primary key 역할 컬럼이라고 표시 가능 + not null + unique 제약도 자동부여됨
5. auto_increment constraint - 데이터 안 넣어도 자동으로 1씩 증가하는 정수 넣어줌
GUI 툴 쓰면 편리함

join 문법이 뭐임? 여러개로 흩어져있는 데이터를 하나로 합치는 행위임
합칠거면 테이블을 왜 귀찮게 여러개로 나눈거임? 정규화 때문임
정규화만 잘하면 데이터베이스 설계도 가능함 아주 중요한 개념이니 머리 속에 박아넣도록
제1정규화: 한 칸엔 오직 하나의 데이터만 (이유 1. 나중에 데이터 찾기 힘들어짐 2. 나중에 데이터 수정이 어려워짐)
제1정규화를 만족하는 테이블 = 제1정규형 테이블
실은 json, array 데이터 타입 쓰면 한칸에 여러 자료 저장할 수 있지만 나중에 한 데이터만 찾기에는 힘듦
그래서 제1정규화를 해놔야 나중에 문제가 안 생김
제2정규화: 현재 테이블의 주제와 관련없는 컬럼을 다른 테이블로 빼놓는 작업
제2정규화를 만족하는 테이블 = 제2정규형 테이블
제2정규화를 사용하면 중복된 데이터를 한 번에 수정하기는 쉽다는 장점이 있지만 / 테이블 1개만으로는 알 수 없는 정보가 생길 수 있다는 단점이 있음
비관계형 db들은 정규화 그런거 안하는 경우가 많음
관계형 db들은 정규화를 사용하는 경우가 일반적임
제2정규형의 정확한 정의 = partial dependency를 제거한 테이블
partial dependency? 그걸 알려면 composite primary key를 알아야 함? 그건 또 뭔데여?
primary key 역할의 컬럼이 없어서 데이터를 구분하기 힘들 때, 각 컬럼들의 데이터를 종합하여 구분할 수 있는 컬럼들을 composite primary key라고 부름
composite primary key = 합치면 primary key 역할인 컬럼들
그럼 partial dependency를 이해할 수 있음 => 한 컬럼이 하나의 composite primary key에 종속되어 있을 때 partial dependency라고 함
따라서 해당 컬럼을 다른 테이블로 빼버리면 제2정규화가 적용되는거임
핵심: 현재 테이블의 주제와 관련없는 컬럼들을 다른 테이블로 빼버린다
제3정규형은 뭐임?
제3정규화: 일반 컬럼에만 종속된 컬럼을 다른 테이블로 빼는 작업
제3정규화를 만족하는 테이블 = 제3정규형 테이블
장점이 뭐임? 수정이 편리해지겠죠? 대신 단점도 있겠죠? 조회하기 귀찮음
근데 관계형 db들은 제3정규형들까지 사용함
제3정규화의 정확한 정의 = 제2정규형에서 transitive dependency를 제거한 거임
transitive dependency? 컬럼A(primary key 컬럼),컬럼B(컬럼A에 종속된 컬럼),컬럼C(컬럼B에 종속된 컬럼)
이때 컬럼C는 컬럼A에 transitive dependency가 있다고 얘기함
transitive dependency를 제거할려면 컬럼C를 따로 다른 테이블로 빼면 됨
테이블 쪼갤 때 유의사항
1. 첫 컬럼은 항상 primary key 넣는 게 좋음
2. 다른 테이블의 데이터 사용시 primary key 적을 수 있으면 적기(중복 데이터 방지)
foreign key = 다른 테이블의 primary key 사용하는 컬럼
컬럼 만들 때 foreign key 역할이라고 표시 가능 => 장점이 있으니까 쓰는 거임
1. 어떤 테이블의 primary key를 사용중인지 2. 어떤 컬럼에 foreign key 등록할지 3. 어떤 컬럼의 primary key를 사용중인지
장점이 뭐임? 1. 조회가 쉬움 2. 다른 테이블에서 쓰는 데이터 실수로 삭제 방지해줌

쪼개놓은 테이블을 다시 합쳐서 출력하려면 inner join 하셈
사실 select from 뒤에 여러 테이블을 출력할 수 있음
테이블 간 컬럼명이 겹칠수도 있는데 그럴 때는 table명.컬럼명으로 출력하셈
근데 여러 테이블을 출력하라고 하면 가능한 모든 행의 조합을 다 출력해줌
그럴 때는 필터링 해주면 되는 거임
근데 inner join 써도 테이블 2개 합쳐줌
select * from table명1 inner join table명2 (역시 얘도 가능한 모든 조합 다 출력해줌)
그럼 얘도 필터링하면 되는데 inner join 뒤에는 where 말고 on으로 필터링해야함
table명1 inner join table명2 on 조건식
inner join 사용해서 테이블을 3개 이상 붙이려면 => table명1 inner join table명2 on 조건식 inner join table명3 on 조건식
cross join 사용하면 모든 행의 조합을 출력할 수 있음
cross join은 거의 사용 안 하긴 함(더미 데이터가 필요할 때 간혹 사용하기도 함)

left (outer) join = inner join + 왼쪽 테이블 전부 출력해주세요
right (outer) join = inner join + 오른쪽 테이블 전부 출력해주세요
왜 쓰는 건데요?
테이블 간 접점이 없는 행들을 출력하고 싶을 때 사용하면 됩니당 => null 부분을 확인할 수 있음
컬럼명 is null => null 값인 값들 다 가져와줌
full join = left join + right join (MySQL에서는 사용 불가) <- 지원을 안 하는 이유는 쓸모 없어서 그럼

table에 데이터 집어넣는 SQL 문법 알아봅시다
insert into table명 (존재하는 컬럼명) values (넣을 값)
(참고) 모든 컬럼에 데이터 넣을 때는 컬럼명 다 기입하지 않고 생략해도 됨
(참고) null 대신 빈 문자열, 0 이런거 넣어도 됨
1. 1개의 값만 출력하는 서브쿼리 넣어도 상관 없음
2. values() 대신 서브쿼리 넣어도 상관 없음
3. 새 테이블 생성 & 복사할 수도 있음
select * into 새로운테이블명 from 기존테이블명 (MySQL은 얘 사용 불가능)
create (temporary) table 새로운테이블명 select * from 기존테이블명 (temporary 사용하면 임시로 사용가능함 => 재접속시 사라짐)
테이블 복사는 언제함? 쿼리 결과 잠깐 저장하거나 테스트할 때 사용함
삽입/수정/삭제는 위험한 작업임 => 많은 사람들한테 해당 권한을 주면 나중에 높은 확률로 망할 수 있음
지금 로그인 중인 root 계정은 한명 내지 두명만 주고 나머지 사원들에게는 권한 축소시킨 아이디 발급해주셈
MySQL workbench에서 Server-Users and Previleges-> 계정 하나 만들고 권한 주셈

데이터 수정하려면 update 테이블명 set 수정할 컬럼 where 조건식(어떤 행을 수정할지)
set 뒤에 여러 컬럼 수정 가능 + set 뒤에 있는 등호는 대입해주는 연산자임
(주의사항) where 빼면 모든 행이 수정됨
행을 삭제하려면 delete from 테이블명 where 조건식(삭제하고픈 행 찾는 식)
(주의사항) 역시 where 빼면 모든 행이 삭제됨
다른 테이블에서 foreign key로 사용중인 행은 삭제 불가능함
join한 테이블에도 update, delete 사용 가능
join한 테이블에서 삭제되는 부분을 delete 옆에 기입함으로써 설정할 수 있음

union 쓰면 select 결과들 하나로 합칠 수 있음
select 구문 사이에 union 써주면 끝임
같은 테이블 출력결과도 union으로 합쳐줄 수 있음
(주의사항) 컬럼갯수가 맞아야 union으로 합칠 수 있음
union 사용하면 테이블 간의 중복데이터를 제거해줌 <=> 중복제거 안하고 싶으면 union all 사용하셈
join: 테이블을 양옆으로 붙여줌 / union: 테이블을 위아래로 붙여줌

table 말고 view라는 친구도 있음
view: 가상의 테이블 (select로 찾은 행들을 테이블로 저장해서 쓰고 싶을 때 사용함)
create view view명 as select 컬럼1, 컬럼2, ... from 테이블명
view도 table처럼 select insert update delete 전부 가능함 (MySQL 기준)
1. 복잡한 join 형태의 table을 view로 저장해서 재사용하기 쉬움
2. view는 실제 테이블이 아니기 때문에 일반 table보다 하드용량 차지가 적음
3. table의 컬럼 변경을 view를 통해 먼저 시도해볼 수 있음
4. view 안에서 또다른 view를 select를 통해 만들어 낼 수 있음
실은 view가 실제로 테이블이 생성되는 게 아니라 select 문법을 테이블 형태로 눈속임해주는 거임
