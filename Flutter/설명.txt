flutter project 생성하셈
lib 폴더 안의 main.dart가 메인 페이지임
시작하기 전에 analysis_options.yaml의 rules 부분에 4줄 추가할 것(rules 보다 두칸 뒤에 있어야함)
뭐한거임? Lint(코드 잡아주는 관리 기계 같은 거) 잠깐 끄는 용도(초보때는 쓸데없음)

void main() {} 제외하고 다 지우셈
stless 입력 후 tab 키
void main runApp() => 앱 구동시켜주세요(void main 안에서만 구동 가능함)
앱 메인 페이지 만드는 법 알 필요 없음
flutter에서 앱 디자인 어케 넣음? 위젯을 짜집기하면 됨
브라우저로 띄워지지만 실제로는 앱임
꼭 알아야 할 위젯(글자, 이미지, 아이콘, 박스 위젯)
글자 넣고 싶으면 Text('글자')
아이콘 넣을 땐 Icon(Icons.아이콘 이름) 
아이콘 이름은 flutter 홈페이지 가서 찾아보셈
이미지 넣을 땐 보관용 assets 폴더 만들고 이미지 넣은 후 Image.asset('assets/경로')
이미지 쓰겠다고 등록도 해야 함
pubspec.yaml 파일에 외부 패키지, 라이브러리 같은 모든 걸 다 거기에 저장함
flutter 밑에 assets: -assets/ 적으면 됨
경로는 assets/이미지파일이름
네모 박스 넣을 땐 Container(width: ~, height: ~, color: Color.~) or SizedBox()
스타일 줄 땐 (스타일명 : 값)
flutter의 사이즈 단위는 LP임 (50LP == 1.2cm)
어디서부터 사이즈를 정하는지에 대해서는 부모가 정함
내 자식 위젯의 기준점을 중앙으로 설정해줄려면 Center(이 안에 적던가)

레이아웃 만드는 법
MaterialApp: 위젯 - 구글이 제공해주는 MaterialApp 위젯을 사용할 수 있음 but 구글 스타일이라서 맘에 안 들수도
그러면 Cupertino 위젯 사용하거나, 커스터마이징하고 싶으면 MaterialApp 위젯을 사용하는 걸 추천함 (그냥 원하는대로 짜고 구글 스타일을 빼는게 편함)
MaterialApp 위젯 사용하면 Scaffold() 위젯을 통해서 상중하로 나눠줄 수 있음
appBar - 상단, body - 중간, bottomNavigationBar - 하단
여러 위젯을 가로로 배치하고 싶으면 Container말고 Row(children: [])를 사용해보셈
세로는 Column(children: []) 사용해보셈
Row, Column 요소들을 중앙 정렬하고 싶으면 mainAxisAlignment: MainAxisAlignment.~~ 를 잘 사용해보면 됨
display: flex랑 겁나 유사함
반대로 crossAxisAlignment 사용하면 
Row의 mainAxis - 가로축, crossAxis - 세로축
Column은 반대임
ctrl + space바를 통해 자동 완성 검색하면서 쓰셈

BottomAppBar 높이 조절도 할 수 있음
height를 줄 수도 있지만 그런 옵션은 없음
그러면 어케 함? Container 안에 Row를 넣어서 하면 될 듯
Container라는 위젯은 무겁고 SizedBox 위젯이 좀 더 가벼움
width, height, child만 필요한 박스면 SizedBox 사용하는게 성능상으로 더 좋음
박스 디자인하는 방법 알아봅시다
박스에 여백을 주고 싶으면 margin: EdgeInsets.all(값), padding: EdgeInsets.all(값)
개별로 여백을 주고 싶으면 EdgeInsets.fromLTRB(left, top, right, back)에 대한 값을 넣어주면 됨
나머지 찌끄레기 박스 스타일들은 decoration 안에 넣으면 됨
대신 decoration: BoxDecoration 사용하면 이 안에서 color 적용시켜야 함!
박스 위치는 어케 정렬함
정중앙 정렬은 Center() 안에 담으면 됨
다른 곳에 정렬하고 싶으면 Algin으로 감싸셈
밑에 alignment: Alignment.~~ 넣으면 해당 방향으로 정렬
박스 width를 가로로 꽉차게 하고 싶다면 width: double.infinity (부모 박스를 넘지 않는 선에서)

Typography가 뭐임
글자에 스타일 주는 거임
Text(value, style: TextStyle(여기 안에 넣으면 됨))
색상, 폰트 종류, 사이즈 이런 거 다 가능함
색주는 방법은 1. Colors.컬러명 or 2. Color(0xffaaaaaa) -> hex 방식임, or 3, Color.fromRGBO(Red, Green, Blue, Opacity)
2번 방법의 장점은 hex 방식으로 넣기 때문에 다양한 색 넣을 수 있음
나중에 필요할 때 검색해서 찾아쓰셈
fontWeight: FontWeight.w~
아이콘 디자인 하는 방법은 (Icons.~, color: ~, size: ~)
버튼 위젯도 있고 이거 디자인할 수 있음
TextButton, IconButton, ElevateButton 셋 중에 하나 택하셈
버튼 위젯은 child: ~, onPressed: ~ 요 두개의 파라미터는 무조건 필수임
버튼 디자인은 style: ButtonStyle(~~)
IconButton은 Icon을 넣어야 함
AppBar도 디자인 할 수 있음 그전에 안에 들어가는 파라미터 해석해볼 거임
title: 왼쪽 제목
leading: 왼쪽에 넣을 아이콘
actions: [우측 아이콘 리스트]
레이아웃 혼자서도 잘짜는 법이 뭐임?
1. 예시디자인이 필요함 그거 준비하거나 없으면 다른 앱 베끼셈
2. 예시화면에 네모 그려보셈 (빈 공간 없게 네모 그려보셈)
3. 바깥 네모부터 하나하나 위젯으로 만들어보셈
가로로 배치해야 하면 row, 세로로 배치해야하면 column임
4. 마무리 디자인하면 됨

Row 안에 박스를 2개 넣었다고 가정하기
박스의 폭을 줄 때 width 넣으면 되는데 %로 넣고 싶을 때는 어떡해야 함?
이럴 때 Flexible로 감싸면 됨
Flexible(child: Container(), flex: ~배수, )
배수가 무슨 역할을 함? 비율임
얘를 들어서 
Flexible(child: Container(), flex: 3), => 전체 박스 폭 중 30% 파지
Flexible(child: Container(), flex: 7), => 전체 박스 폭 중 70% 차지
Column도 마찬가지임
근데 Flexible도 쓰기 귀찮다면?
Expanded() 사용하면 됨 이건 박스 하나만 꽉채우고 싶을 때 사용하면 됨
사실상 flex:1로 설정되어 있는 Flexible이라고 생각하면 됨
본인만 flex:1 있으면 본인만 커진다는 점 유의할 것
쉽게 요약하자면
박스 폭을 %로 주고 싶으면 Flexible
박스 하나 넓게 채우려면 Expanded
박스 디자인했는데 레이아웃의 의도와 다르다면 아래를 의심해보셈
1. 사이즈가 이상하거나
2. 박스 위치가 이상하거나
그래도 다르다면 DevTools를 확인해보면 됨
밑에 터미널 창의 파란 버튼 눌러보면 레이아웃을 확인해볼 수 있음 (참고하기)
102번째 줄 매우 꿀팁임 잘 참고하시면 도움 많이 될 듯

커스텀 위젯에 대해서 배워봅시다
레이아웃용 위젯들이 너무 길어지면 보기 싫어질 듯
그러면 그걸 한 단어로(커스텀 위젯으로) 축약할 수 있음
stless라고 작성하면 자동완성됨
1. class명 작명하고
2. return 옆에 축약할 레이아웃 넣으면 됨
약간 리액트의 컴퍼넌트 같은 느낌임 (자주 사용할 거 같으니 참고할 것)
- line 1. 커스텀 위젯은 class로 만들어야 함
커스텀 위젯이 되려면 class 안에 변수나 함수를 많이 넣어야 함
StatelessWidget이라는 완성된 위젯 완성품을 작명된class로 복사하는 거임 (우리가 객체지향할 때 사용하는 extends 맞음)
- line 2. class에 어떤 파라미터 넣을 수 있는지 정의하는 부분임
- line 4. class 안에 build라는 함수 만드는 부분 (dart 언어에서는 작명() 하면 바로 함수 만들어짐)
return문 안에는 축약할 위젯을 넣으면 됨
- line 3. override -> extends를 통해 중복되는 이름이 생길 수 있기 때문에 오버라이딩하는 거임
사실은 변수, 함수 문법으로도 축약 가능함
var 변수명 = 축약할위젯명
대신 이렇게 사용하면 성능상 문제가 생길 수 있음 
(참고사항) 이 방식은 평생 내용물이 변경될 일이 없을 때만 사용하는게 좋음 
커스텀 위젯을 만들면 state 관리가 힘들다는 단점도 생기니
컴퍼넌트처럼 '재사용 많은 UI들, 큰 페이지들'에 대해서 커스텀 위젯을 만들어보셈
앱에 보여줘야하는 항목들이 100개라면?
일일이 적기에는 너무 많아보임 + 위젯이 많다고 해서 스크롤바가 자동으로 생기지 않음
ListView(~) 안에 넣으면 스크롤바가 생김 + 스크롤 위치 감시도 가능함 + 메모리 절약 기능도 있음
controller 내장함수를 통해 스크롤 위치 파악 가능함

ListTile이라는 위젯 나중에 한 번 알아보셈
100개가 있으면 하나하나 다 치기 싫으니까 반복문 배워봅시다
ListView.builder() 사용하면 자동으로 반복문 효과를 줄 수 있음
itemCount: 숫자 -> 반복 횟수 정하기
itemBuilder: (c,i) {
  return 위젯
}
c: 컨텍스트 -> 나중에 쓸거니까 지금은 넘어가셈, i: 반복문 돌 때마다 0부터 1씩 증가하는 정수
목록 많이 필요할 때 ListView.builder() 사용해보셈
변수 같은 거 잠시 출력해볼려면 print(); 사용하셈
출력은 alt+4 누르면 나오는 콘솔창에 나옴
이제 레이아웃 만드는 법 끝
부가적인 건 검색해서 찾아봅시당
이제부터는 기능들에 대해서 배워봅시당
FloatingActionButton(child: ~, onPressed: (){}) -> 우측 하단에 생기는 버튼임
버튼을 눌렀을 때 어떤 기능을 수행하고 싶다? onPressed 안에 있는 콜백함수에 기능 만들면 될 듯
위젯이 재랜더링이 안되어서 변수의 실제값을 알아볼 수 없음
그건 어떻게 알 수 있음? 담강의보셈 ㅎ

화면을 어떻게 재랜더링함?
state 쓰면 state가 바뀔 때마다 재랜더링됨 (그냥 React랑 똑같네)
Flutter에서도 데이터를 잠깐 저장할려면 변수 or state 사용하면 됨
둘의 차이점은? state는 변하면 state를 사용하는 위젯이 자동 재랜더링됨
state를 만드는 방법
1. StatefulWidget 만들기 (stful로 자동완성 가능) (state는 StatefulWidget을 통해서만 생성 가능)
1-1. StatelessWidget에서는 state 사용 불가능 따라서 StatefulWidget으로 바꿔줘야 함
2. 거기 두번째 class안에 변수를 만들면 그 친구는 자동적으로 state로 처리됨
근데 내용이 안 바뀌는데요? state를 변경하려면 setState(() {여기서 바꾸는 처리해줘야함})

Dialog(모달창) 띄우는 법 알아봅시당
모달창 어떻게 만듦? 
Dialog() 위젯 사용하면 그냥 나옴
그러면 어떻게 원할 때 띄움? showDialog()라는 내장함수 사용하면 됨
showDialog(context: context, builder: (context) {
  return Dialog(child: Text('내용'));
})
근데 안뜨는데요? 왜 안뜸?
빠른 해결책 - 보통 첫 페이지는 Scaffold()부터 시작하는 경우가 많음
따라서 MaterialApp을 MyApp() 바깥으로 보내면 됨
어떻게 보냄?
그냥 MyApp()을 감싸면 됨
지금부터 원리를 알아봅시당
context의 개념에 대해서 먼저 알아야함
커스텀 위젯을 생성할 때마다 하나의 context가 생성되는걸 알 수 있음
build(안에 있는 context 볼 수 있음)
부모 위젯의 정보를 담고 있는 변수라고 보면 될 듯
여튼 context를 채워야 하는 함수들이 존재하는데
이 함수들은 context 중 MaterialApp이 존재해야만 잘 작동하는 함수들임
즉 이 함수가 사용되고 있는 위젯의 부모 위젯 중에서 MaterialApp이 있어야 잘 작동이 됨
그래서 MaterialApp을 밖으로 빼줘야만 잘 작동이 됨
context를 새로 생성해주는 방법도 있음 
Builder()로 감싸고 이 안에 builder: (context)라고 사용한다면 
생성한 곳의 위젯을 기준으로 context를 생성해줌
