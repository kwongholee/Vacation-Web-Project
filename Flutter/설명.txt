flutter project 생성하셈
lib 폴더 안의 main.dart가 메인 페이지임
시작하기 전에 analysis_options.yaml의 rules 부분에 4줄 추가할 것(rules 보다 두칸 뒤에 있어야함)
뭐한거임? Lint(코드 잡아주는 관리 기계 같은 거) 잠깐 끄는 용도(초보때는 쓸데없음)

void main() {} 제외하고 다 지우셈
stless 입력 후 tab 키
void main runApp() => 앱 구동시켜주세요(void main 안에서만 구동 가능함)
앱 메인 페이지 만드는 법 알 필요 없음
flutter에서 앱 디자인 어케 넣음? 위젯을 짜집기하면 됨
브라우저로 띄워지지만 실제로는 앱임
꼭 알아야 할 위젯(글자, 이미지, 아이콘, 박스 위젯)
글자 넣고 싶으면 Text('글자')
아이콘 넣을 땐 Icon(Icons.아이콘 이름) 
아이콘 이름은 flutter 홈페이지 가서 찾아보셈
이미지 넣을 땐 보관용 assets 폴더 만들고 이미지 넣은 후 Image.asset('assets/경로')
이미지 쓰겠다고 등록도 해야 함
pubspec.yaml 파일에 외부 패키지, 라이브러리 같은 모든 걸 다 거기에 저장함
flutter 밑에 assets: -assets/ 적으면 됨
경로는 assets/이미지파일이름
네모 박스 넣을 땐 Container(width: ~, height: ~, color: Color.~) or SizedBox()
스타일 줄 땐 (스타일명 : 값)
flutter의 사이즈 단위는 LP임 (50LP == 1.2cm)
어디서부터 사이즈를 정하는지에 대해서는 부모가 정함
내 자식 위젯의 기준점을 중앙으로 설정해줄려면 Center(이 안에 적던가)

레이아웃 만드는 법
MaterialApp: 위젯 - 구글이 제공해주는 MaterialApp 위젯을 사용할 수 있음 but 구글 스타일이라서 맘에 안 들수도
그러면 Cupertino 위젯 사용하거나, 커스터마이징하고 싶으면 MaterialApp 위젯을 사용하는 걸 추천함 (그냥 원하는대로 짜고 구글 스타일을 빼는게 편함)
MaterialApp 위젯 사용하면 Scaffold() 위젯을 통해서 상중하로 나눠줄 수 있음
appBar - 상단, body - 중간, bottomNavigationBar - 하단
여러 위젯을 가로로 배치하고 싶으면 Container말고 Row(children: [])를 사용해보셈
세로는 Column(children: []) 사용해보셈
Row, Column 요소들을 중앙 정렬하고 싶으면 mainAxisAlignment: MainAxisAlignment.~~ 를 잘 사용해보면 됨
display: flex랑 겁나 유사함
반대로 crossAxisAlignment 사용하면 
Row의 mainAxis - 가로축, crossAxis - 세로축
Column은 반대임
ctrl + space바를 통해 자동 완성 검색하면서 쓰셈

BottomAppBar 높이 조절도 할 수 있음
height를 줄 수도 있지만 그런 옵션은 없음
그러면 어케 함? Container 안에 Row를 넣어서 하면 될 듯
Container라는 위젯은 무겁고 SizedBox 위젯이 좀 더 가벼움
width, height, child만 필요한 박스면 SizedBox 사용하는게 성능상으로 더 좋음
박스 디자인하는 방법 알아봅시다
박스에 여백을 주고 싶으면 margin: EdgeInsets.all(값), padding: EdgeInsets.all(값)
개별로 여백을 주고 싶으면 EdgeInsets.fromLTRB(left, top, right, back)에 대한 값을 넣어주면 됨
나머지 찌끄레기 박스 스타일들은 decoration 안에 넣으면 됨
대신 decoration: BoxDecoration 사용하면 이 안에서 color 적용시켜야 함!
박스 위치는 어케 정렬함
정중앙 정렬은 Center() 안에 담으면 됨
다른 곳에 정렬하고 싶으면 Algin으로 감싸셈
밑에 alignment: Alignment.~~ 넣으면 해당 방향으로 정렬
박스 width를 가로로 꽉차게 하고 싶다면 width: double.infinity (부모 박스를 넘지 않는 선에서)

Typography가 뭐임
글자에 스타일 주는 거임
Text(value, style: TextStyle(여기 안에 넣으면 됨))
색상, 폰트 종류, 사이즈 이런 거 다 가능함
색주는 방법은 1. Colors.컬러명 or 2. Color(0xffaaaaaa) -> hex 방식임, or 3, Color.fromRGBO(Red, Green, Blue, Opacity)
2번 방법의 장점은 hex 방식으로 넣기 때문에 다양한 색 넣을 수 있음
나중에 필요할 때 검색해서 찾아쓰셈
fontWeight: FontWeight.w~
아이콘 디자인 하는 방법은 (Icons.~, color: ~, size: ~)
버튼 위젯도 있고 이거 디자인할 수 있음
TextButton, IconButton, ElevateButton 셋 중에 하나 택하셈
버튼 위젯은 child: ~, onPressed: ~ 요 두개의 파라미터는 무조건 필수임
버튼 디자인은 style: ButtonStyle(~~)
IconButton은 Icon을 넣어야 함
AppBar도 디자인 할 수 있음 그전에 안에 들어가는 파라미터 해석해볼 거임
title: 왼쪽 제목
leading: 왼쪽에 넣을 아이콘
actions: [우측 아이콘 리스트]
레이아웃 혼자서도 잘짜는 법이 뭐임?
1. 예시디자인이 필요함 그거 준비하거나 없으면 다른 앱 베끼셈
2. 예시화면에 네모 그려보셈 (빈 공간 없게 네모 그려보셈)
3. 바깥 네모부터 하나하나 위젯으로 만들어보셈
가로로 배치해야 하면 row, 세로로 배치해야하면 column임
4. 마무리 디자인하면 됨

Row 안에 박스를 2개 넣었다고 가정하기
박스의 폭을 줄 때 width 넣으면 되는데 %로 넣고 싶을 때는 어떡해야 함?
이럴 때 Flexible로 감싸면 됨
Flexible(child: Container(), flex: ~배수, )
배수가 무슨 역할을 함? 비율임
얘를 들어서 
Flexible(child: Container(), flex: 3), => 전체 박스 폭 중 30% 파지
Flexible(child: Container(), flex: 7), => 전체 박스 폭 중 70% 차지
Column도 마찬가지임
근데 Flexible도 쓰기 귀찮다면?
Expanded() 사용하면 됨 이건 박스 하나만 꽉채우고 싶을 때 사용하면 됨
사실상 flex:1로 설정되어 있는 Flexible이라고 생각하면 됨
본인만 flex:1 있으면 본인만 커진다는 점 유의할 것
쉽게 요약하자면
박스 폭을 %로 주고 싶으면 Flexible
박스 하나 넓게 채우려면 Expanded
박스 디자인했는데 레이아웃의 의도와 다르다면 아래를 의심해보셈
1. 사이즈가 이상하거나
2. 박스 위치가 이상하거나
그래도 다르다면 DevTools를 확인해보면 됨
밑에 터미널 창의 파란 버튼 눌러보면 레이아웃을 확인해볼 수 있음 (참고하기)
102번째 줄 매우 꿀팁임 잘 참고하시면 도움 많이 될 듯

커스텀 위젯에 대해서 배워봅시다
레이아웃용 위젯들이 너무 길어지면 보기 싫어질 듯
그러면 그걸 한 단어로(커스텀 위젯으로) 축약할 수 있음
stless라고 작성하면 자동완성됨
1. class명 작명하고
2. return 옆에 축약할 레이아웃 넣으면 됨
약간 리액트의 컴퍼넌트 같은 느낌임 (자주 사용할 거 같으니 참고할 것)
- line 1. 커스텀 위젯은 class로 만들어야 함
커스텀 위젯이 되려면 class 안에 변수나 함수를 많이 넣어야 함
StatelessWidget이라는 완성된 위젯 완성품을 작명된class로 복사하는 거임 (우리가 객체지향할 때 사용하는 extends 맞음)
- line 2. class에 어떤 파라미터 넣을 수 있는지 정의하는 부분임
- line 4. class 안에 build라는 함수 만드는 부분 (dart 언어에서는 작명() 하면 바로 함수 만들어짐)
return문 안에는 축약할 위젯을 넣으면 됨
- line 3. override -> extends를 통해 중복되는 이름이 생길 수 있기 때문에 오버라이딩하는 거임
사실은 변수, 함수 문법으로도 축약 가능함
var 변수명 = 축약할위젯명
대신 이렇게 사용하면 성능상 문제가 생길 수 있음 
(참고사항) 이 방식은 평생 내용물이 변경될 일이 없을 때만 사용하는게 좋음 
커스텀 위젯을 만들면 state 관리가 힘들다는 단점도 생기니
컴퍼넌트처럼 '재사용 많은 UI들, 큰 페이지들'에 대해서 커스텀 위젯을 만들어보셈
앱에 보여줘야하는 항목들이 100개라면?
일일이 적기에는 너무 많아보임 + 위젯이 많다고 해서 스크롤바가 자동으로 생기지 않음
ListView(~) 안에 넣으면 스크롤바가 생김 + 스크롤 위치 감시도 가능함 + 메모리 절약 기능도 있음
controller 내장함수를 통해 스크롤 위치 파악 가능함

ListTile이라는 위젯 나중에 한 번 알아보셈
100개가 있으면 하나하나 다 치기 싫으니까 반복문 배워봅시다
ListView.builder() 사용하면 자동으로 반복문 효과를 줄 수 있음
itemCount: 숫자 -> 반복 횟수 정하기
itemBuilder: (c,i) {
  return 위젯
}
c: 컨텍스트 -> 나중에 쓸거니까 지금은 넘어가셈, i: 반복문 돌 때마다 0부터 1씩 증가하는 정수
목록 많이 필요할 때 ListView.builder() 사용해보셈
변수 같은 거 잠시 출력해볼려면 print(); 사용하셈
출력은 alt+4 누르면 나오는 콘솔창에 나옴
이제 레이아웃 만드는 법 끝
부가적인 건 검색해서 찾아봅시당
이제부터는 기능들에 대해서 배워봅시당
FloatingActionButton(child: ~, onPressed: (){}) -> 우측 하단에 생기는 버튼임
버튼을 눌렀을 때 어떤 기능을 수행하고 싶다? onPressed 안에 있는 콜백함수에 기능 만들면 될 듯
위젯이 재랜더링이 안되어서 변수의 실제값을 알아볼 수 없음
그건 어떻게 알 수 있음? 담강의보셈 ㅎ

화면을 어떻게 재랜더링함?
state 쓰면 state가 바뀔 때마다 재랜더링됨 (그냥 React랑 똑같네)
Flutter에서도 데이터를 잠깐 저장할려면 변수 or state 사용하면 됨
둘의 차이점은? state는 변하면 state를 사용하는 위젯이 자동 재랜더링됨
state를 만드는 방법
1. StatefulWidget 만들기 (stful로 자동완성 가능) (state는 StatefulWidget을 통해서만 생성 가능)
1-1. StatelessWidget에서는 state 사용 불가능 따라서 StatefulWidget으로 바꿔줘야 함
2. 거기 두번째 class안에 변수를 만들면 그 친구는 자동적으로 state로 처리됨
근데 내용이 안 바뀌는데요? state를 변경하려면 setState(() {여기서 바꾸는 처리해줘야함})

Dialog(모달창) 띄우는 법 알아봅시당
모달창 어떻게 만듦? 
Dialog() 위젯 사용하면 그냥 나옴
그러면 어떻게 원할 때 띄움? showDialog()라는 내장함수 사용하면 됨
showDialog(context: context, builder: (context) {
  return Dialog(child: Text('내용'));
})
근데 안뜨는데요? 왜 안뜸?
빠른 해결책 - 보통 첫 페이지는 Scaffold()부터 시작하는 경우가 많음
따라서 MaterialApp을 MyApp() 바깥으로 보내면 됨
어떻게 보냄?
그냥 MyApp()을 감싸면 됨
지금부터 원리를 알아봅시당
context의 개념에 대해서 먼저 알아야함
커스텀 위젯을 생성할 때마다 하나의 context가 생성되는걸 알 수 있음
build(안에 있는 context 볼 수 있음)
부모 위젯의 정보를 담고 있는 변수라고 보면 될 듯
여튼 context를 채워야 하는 함수들이 존재하는데
이 함수들은 context 중 MaterialApp이 존재해야만 잘 작동하는 함수들임
즉 이 함수가 사용되고 있는 위젯의 부모 위젯 중에서 MaterialApp이 있어야 잘 작동이 됨
그래서 MaterialApp을 밖으로 빼줘야만 잘 작동이 됨
context를 새로 생성해주는 방법도 있음 
Builder()로 감싸고 이 안에 builder: (context)라고 사용한다면 
생성한 곳의 위젯을 기준으로 context를 생성해줌

부모 위젯의 state를 자식 위젯이 쓰고 싶다면 어떻게 해야할까?
부모 위젯에서 자식 위젯으로 state를 전송하는 법은 다음과 같음
1. 보내고 2. 등록하고 3. 쓰기
보내는 법은 뭐임?
보낼려면 자식위젯(작명: state명)
등록은 어떻게 함? this.작명을 Key? key 옆에 적으면 됨
사용은 final로 선언하면 좋음
final은 var과 달리 나중에 수정할 수 없음 (js의 let이랑 비슷함)
등록 여러 개도 쌉가능임
React처럼 자식 위젯에서 부모 위젯으로 state를 넘길 수는 없음

궁금한 점
부모에서 자식으로 넘겨진 state는 final인데 어떻게 자식에서 부모의 state를 바꿀 수 있을까?
그래서 state를 넘기는게 아니라 수정 함수를 넘겨줘야함
1. 부모에 수정함수를 먼저 만드셈 (참고로 function 붙일 필요 없이 작명(){} 로 만들 수 있음)
2. 자식으로 그냥 수정함수를 보내면 끝임

유저가 입력한 데이터를 어떻게 다룸?
유저가 입력한 데이터를 변수에 담기 위해선 controller 써야함
var 변수명 = TextEditingController() 사용하고 
TextField 안에 파라미터로 controller: 변수명 쓰면 그 변수 안에 담김
아니면 직관적인 방법도 있음
유저가 입력한 데이터를 변수에 담기 위해서
onChanged 사용하면 됨 (이건 react랑 동일하네)
onChanged(a: 유저가 입력한 데이터) {실행할 코드}
TextField가 많을 경우는 onChanged가 좀 더 편함
[] - List, {} - Map
둘 다 변수 여러개 저장할 때 편함

에뮬레이터 설정 방법 알려드림 (윈도우용 / 맥은 알아서 안드로이드 스튜디오 깔면 자동으로 에뮬레이터 깔림 아니면 말고 ㅎ)
1. PC 재부팅 시키면서 BIOS 셋팅 들어가야함 (부팅하자마자 F2키나 Del키 연타하면 들어갈 수 있음)
AMD CPU -> Virtual 어쩌구(or SVM)를 Enabled로 바꾸기
Intel CPU -> Virtual 어쩌구를 Enabled로 바꾸기
바꿨으면 저장하고 재시작하기
2. 시작-검색 창에서 Windows 기능 켜기 검색해서 실행
Hyper-V, 하이퍼바이저 플랫폼 이런거 다 체크해제해야 함 안보이면 패스
3. Android studio 켜서 file-settings-appearance&behavior-system settings-andriodSDK 우측 SDK Tools 탭
여러 체크 박스 나오는데
AMD CPU면 Hypervisor Driver for AMD 어쩌구 체크
Intel CPU면 Intel x86 Emulator 어쩌구 체크
Apply 버튼 누르기 간단한 프로그램 설치 진행될거임 
(만약 안되면 1,2번이 잘못된거니까 다시 확인 고고)
-안드로이드 가상 기기 만들기 (맥북에서도 안드로이드 버전 원하면 이거 따라해야함)
1. 상단메뉴 tools - avd manager 눌러서 + create virtual device 누르기
2. 기기 고르라고 나오면 맘에드는거 고르기
3. 시스템 이미지 고르는 단계인데
지금은 최신버전 다운 받으시고 나중에 앱 발행할때 옛날버전까지 다 실험해보셈

사용자의 연락처를 쓸려면 유저의 허락을 받아야 함
사진, 위치 같은 것들 전부 다 권한 받고 시작하잖음? 그거 하는 거임
대신 permission_handler라는 외부 패키지 다운 받아야함
pubspec.yaml 파일에서 permission_handler: ^8.3.0 적어주셈
그리고 main.dart 상단에 import 문법으로 불러와주면 설치 완료된거임
Android 기기 셋팅할려면
1. android/gradle.properties 확인하고
2. android/app/build.gradle 확인하고
3. android/app/src/main/AndroidManifest.xml 파일 들어가서 셋팅하기
IOS 셋팅은 나중에 찾아보셈
이런 권한 받는 거는 나중에 도큐먼트 자세하게 읽어봅시당
initState() 안에 적은 코드는 위젯 로드될 때 한 번 실행됨 (useEffect(() => {}, []) 이거랑 똑같음)
요즘은 앱 맨 처음 실행할 때 팝업을 띄우는 게 아니라 
openAppSettings()로 앱 설정화면을 켜주는 게 좋을 듯
그래서 진짜 그 기능이 필요한 시점에 권한 설정을 받는게 좋을 듯

실제 연락처를 꺼내는 패키지는 또 따로 있음 (매우 귀찮군...)
pubspec.yaml 파일 들어가서 contacts_service: ^0.6.3 다운 받으셈
main.dart에서는 import문 필요
Dart문은 타입을 매우매우매우 엄격하게 보기 때문에 잘 지켜야 함 (Typescript랑 비슷함)
Union 사용해서 타입을 합쳐줄 수도 있지만 더 직관적인 방법은
빈 리스트로 둬서 dyanmic 타입으로 정해주면 됨 dyanmic이 되면 어떤 타입이 들어오든 상관 안 씀
혹은 변수 만들 때부터 미리 타입을 강제 지정해줘도 됨

이번에는 빌드 해볼거임
빌드하면 apk 혹은 aab 파일 확장자로 바뀔거임
대신 빌드하기 전에 테스트해봐야 함
새 폰에서 테스트하면 무조건 정상인데 왜 유저폰에서 하면 에러가 남?
유저들 폰은 새 폰처럼 모든 기능이 완벽하게 정상으로 작동하지 않기 때문에
그래서 예외처리를 잘해야 함
1. 타입 지정 잘했는지
2. null check 했는지 이런거 잘 확인해야함
변수나 함수에 타입 지정 잘 했는지 꼭 확인하기
null check는 어떻게 함? if문 잘 사용하면 될 듯
혹은 삼항연산자나 ?? 잘 사용하면 될 듯
빌드 방법은 나중에 다시 도큐먼트 읽어보셈 ㅎ

TextField 꾸미는 법
TextField(
  decoration: InputDecoration(
    ~~~여기서꾸미면됨~~~
  )
)
어우 다 적기 귀찮네 그냥 필요할 때 구글에서 찾아보세요 ㅎㅎ

새로운 프로젝트 만들어서 새로 시작해보겠음
스타일을 넣는 방법 알려줬었는데 그건 너무 길어지고 복잡해져서 한눈에 보기 힘듦
그래서 css처럼 외부 스타일을 모아놓는 ThemeData()라는걸 사용하면 편함
ThemeData() 안에서 거의 모든 위젯을 디자인할 수 있음
장점은 정해놓은 스타일이 모두 통일성 있게 적용되지만 
근데 원칙이 있음
ThemeData 사용시 특징
1. 위젯은 나랑 가까운 스타일을 가장 먼저 적용됨
2. 복잡한 위젯은 복잡한위젯Theme() 안에서 스타일을 줘야함 (ex. Appbar)
3. 텍스트를 사용가능한 위젯은 각자의 위젯 스타일이 정해져있음 그래서 원하는 스타일로 조정할려면
구글링해서 어떤 위젯Theme으로 작성해야 하는지 찾아봐야함
혹은 그게 번거롭거나 반복되는 스타일을 쓰고 싶으면 ThemeData 쓰지 말고 변수에 적용시키는건 어떰?

파일 분리하는 법 알아봅시당
다른 파일은 lib 폴더 안에 넣으면 됨
기본적인 플러터의 기본 위젯 쓰고 싶으면 맨 윗줄에 import 해와야 함
다른 파일에 있는 변수 쓰고 싶으면 import '파일경로' 적고
근데 import 할 때 변수 중복 문제도 발생할 수 있을 거 같은데?
그럴때는 2가지 정도 시도할 수 있음
import '파일경로' as 작명 // 변수 작명시 _를 앞에 붙이면 다른 파일에서 사용 불가능함
버튼 스타일은 이렇게 하셈 (이건 그냥 외워)
textButtonTheme: TextButtonThemeData(
  style: TextButton.styleFrom(
    ~~여기에채우셈~~
  )
)
레이아웃 중간에 ThemeData 넣고 싶으면
그 ThemeData를 적용시킬 위젯을 Theme으로 감싸고 그 안에
data: ThemeData() 생성하면 됨!

페이지 나누는 법
Navigator, Router, tab 3가지 방법 있음
그중에서 이번에는 tab 해보겠음
tab으로 페이지 나누는거 쉬움
그냥 원래대로 state 만들고 조작하게 만들면 됨

서버에서 데이터 가져오는 법 -> 서버에 get 요청 날리면 됨 (그냥 웹이랑 똑같음)
서버 설명해야 함? 백엔드 개발자니까 넘어감 ㅎ
get요청 날릴려면 http 패키지 설치해야함
nodejs처럼 http.request명(Uri.parse(링크))
대신 얘는 Future라서 async await 사용해주는게 좋음
참고로 map에서 데이터 뽑을려면 변수명['key명']임

데이터는 느리게 도착하기 때문에 데이터가 도착하기 전까지 랜더링하는 동안은 오류 화면이 뜸
그러면 data가 들어오면 보여주게 코드 짜면 됨
그냥 if문 짜면 됨
if문이랑 else문 항상 같이 짜야됨 아니면 에러남 ㅡㅡ
이외에도 여러 예외처리 필요한데 뭐 그정도는 경험으로 매꿉시다
Dio라는 패키지 설치하면 Get 요청같은게 더 짧아짐
FutureBuilder 위젯이 뭘까요?
Future를 집어넣을 수 있는 위젯인데
get요청, post요청과 같은 Future를 뱉는 함수들을 넣을 수 있다는 거임
넣어서 뭐함? 완료가 되면 안에 있는 위젯에 보여줌
대신 나중에 데이터를 자주 추가하면 쓰기가 불편해짐

문자 중간에 변수 넣을려면 어떻게 해야함?
'문자 ${변수} 문자' 이렇게 하면 됨
무한 스크롤 기능 구현해봅시당
그럴려면 유저의 스크롤 높이 측정할 줄 알아야함
그전에 import 'package:flutter/rendering.dart' 하셈
스크롤바 높이 측정할려면 stateful widget인게 좋음
statefulwidget은 부모가 보낸 state 등록은 첫번째 클래스에, 사용은 두번째 클래스에서 해야함
사용할때는 widget.변수명으로 해야 잘 작동할 거임
스크롤바 높이 측정할려면 state 만들어서 ListView에 넣어야 함
ScrollController() 변수 하나 만들어주고 ListView의 파라미터에 controller로 넣으면 됨
그러면 스크롤 관련 정보들이 scroll에 담김
위치 측정은 스크롤 움직일 때마다 해야하며 바닥까지 닿았는지 항상 체크해야 함
스크롤의 높이를 측정할려면 addListener를 initState 안에 달아주기 (필요 없어지면 제거하는게 성능에 좋음)
addListener 달면 그 변수가 바뀔때마다 기능을 수행해줌

이번에는 Navigator 써볼거임
Navigator 사용하면 기존 페이지 위에 새로운 페이지를 덮어씌우는 방식임
계속해서 위에 페이지를 덮어씌우는 방식임
이러면 탭과 달리 뒤로가기 버튼이 작동할 수 있음 (stack 방식으로 관리하는 거임)
Navigator.push(context(얘는 MaterialApp의 context 넣으면 됨), route)
route 자리에는 MaterialPageRoute(builder: (c) {return 커스텀위젯}) 하면 됨
c 자리도 context임
함수 기능 안에 return 하나 밖에 없으면 화살표함수 가능함
닫기는 Navigator.pop(context);
페이지가 매우 많으면 routes 사용하는거 추천함
MaterialApp의 파라미터로 routes 설정해주면 됨
routes: {
  '/': (c) => ~~,
  '/detail': (c) => ~~ 등등
}
대신 이거 쓸거면 home 파라미터는 지워주는게 좋음
이건 뭐가 장점임? 페이지가 많고 복잡한 앱 만들때 개발자가 보기 좋을 듯

이번에는 폰에서 이미지 받아오는거 해볼거임
먼저 image_picker 설치해야함
+ IOS 폴더 안의 파일 하나 수정하고 import 해주셈
var picker = ImagePicker();
var image = await picker.pickImage(source: ImageSource.gallery);
만약 카메라 띄우고 싶으면 gallery를 camera로 바꾸면 됨
만약 비디오를 원한다면 pickImage를 pickVideo로 바꾸면 됨
만약 사진 여러 장을 원한다면 pickMultiImage로 바꾸면 됨
선택한 이미지를 위젯에 보여줄려면 일단 state 하나 만들면 될 듯
거기에 File(image.path) 넣으면 되는데
image가 비어있으면 null 값이기 때문에 if문 안에 담아주는게 좋을 듯
선택한 이미지를 보여줄려면 Image.file(state명) 쓰면 될 듯
파일 경로로 이미지 띄우는 법임
고른 이미지의 사이즈를 조정할 수도 있음
가로세로 사이즈를 축소하거나 퀄리티를 축소시킬 수도 있고
필터를 넣어줄 수도 있음
runtimeType으로 변수에 담긴 타입을 알 수 있음

