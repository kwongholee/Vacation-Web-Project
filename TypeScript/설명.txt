typescript == javascript + Type 문법 == 자바스크립트 업글버전
자바스크립트는 dynamic typing이 가능해서 편리하긴 한데
프로젝트 사이즈가 커지면 문제임
코드 길게 짤 때 자유도와 유연성이 높을수록 좋지 않음
그리고 타입스크립트는 에러메세지의 퀄리티가 오짐
근데 사실 타입스크립트는 코드 에디터 부가 기능과 비슷함
타입스크립트 쓸려면 1. node.js 설치하고 2. 터미널에 npm install -g typescript 적어보셈
3. 파일 확장자는 .ts로 마무리하면 되고 4. tsconfig.json이라는 파일 생성해서 기본 셋팅도 마무리해야함
.ts 파일은 브라우저가 못 읽기 때문에 js파일로 변환시켜야함
터미널 켜서 tsc -w 입력해두면 알아서 자동변환해줌 (컴파일)
변수 설정시 :타입명으로 변수의 타입을 지정할 수 있음
변수 타입이 Array일 때는 ':어레이안에들어갈타입명[]'로 지정하면 됨
타입이 Object이면 ':{key: 타입명}'로 지정하면 됨 key뒤에 ?를 붙이면 옵션으로 들어와도 되고 안들어와도 되는 것을 설정할 수 있음
다양한 타입을 가능하게 하고 싶으면 | 연산자 사용 (Union type)
타입은 변수에 담아서 사용할 수 있음 (type alias) => 보통 type명 작성할 때는 첫글자 대문자
함수의 파라미터도 똑같이 설정할 수 있으며, return 값의 type을 검사하고 싶으면 파라미터 옆에 똑같이 설정할 수 있음
array에 쓸 수 있는 타입을 지정할 수 있음(tuple 타입) - 순서에 따라 지정할 수 있음 (ex> [number, boolean] ==> 무조건 첫 번째는 number, 두 번째는 boolean 이어야함)
Object에 타입 지정해야할 속성이 너무 많으면 key랑 value만 따로 지정 가능
class도 타입 지정 가능

tsconfig.json 추가 설정
noImplicityAny는 any라는 타입이 의도치 않게 발생하면 에러 띄워주는 설정
strictNullChecks는 null, undefined 타입에 이상한 조작하면 에러 띄워주는 설정임
나머지 부가 설정들은 tsconfig.json 내리면 있음 확인해보셈

JS 문법 그대로 TS에서 사용 가능함
변수에 타입을 지정한다 == 변수에 쉴드를 씌워준다
타입에는 undefined나 null도 있음
어레이 안에 여러 자료형을 같이 넣고 싶으면 union type 쓰세염
타입스크립트 갓 배운 사람들이 온갖 곳에 다 타입 지정하는데 사실 타입 지정은 원래 자동으로 됨
따라서 타입지정 문법 생략해도 됨

타입 지정에 조건을 여러 개를 못 두나요?
둘 수 있음 | 쓰던가 'Union 타입'이라고 부름
소괄호로 묶어서 보기 좋게 해도 됨 (자료형1 | 자료형2 | 자료형3 ....)
근데 union 타입으로 묶고 변수 선언을 하면 타입이 하나로 지정됨
근데 재할당하면 다시 union 타입으로 바뀜
array나 object에 여러 타입 지정하고 싶으면 union type으로 묶어도 되고
아니면 any 타입 설정하든가
any 타입은 모든 자료형을 다 허용해줌
근데 그러면 타입스크립트 쓰는 이유가 없어지지 않음? 맞음
any 타입은 타입 지정 쉴드를 없애주세요라고 하는 거랑 같음
그래서 기본적으로는 타입 지정하지 말고 걍 js 문법으로 변수 설정하든가
unknown 타입도 있음 얘도 모든 자료형을 허용해줌
unknown 타입이 any 타입보다 안전함 왜?
any 타입은 아예 쉴드 자체가 없지만 unknown 타입은 쉴드가 있어서 조금 더 엄격함
타입스크립트는 js보다 휠씬 엄격함
간단한 연산도 피연산자 타입이 일치해야 함
유니온 타입 변수에 값을 할당하지 않은 상태라면 연산이 불가능함
당연히 unknown 타입으로 지정한 변수도 연산이 가능하겠음? 불가능함
(강조) 타입스크립트는 타입에 굉장히 엄격함

변수만 따로 설정하면 any 타입으로 할당됨
그래서 파라미터도 똑같은 방법으로 타입 설정이 가능함
return 값도 똑같이 타입 설정 가능함
함수에서는 특별하게 void라는 타입도 존재함
void 타입을 지정하면 return 값이 존재하지 않는 함수가 되어버림
타입 지정된 파라미터는 무조건 함수 사용 시 적어야 함 (자바스크립트는 안 써도 됨)
파라미터가 옵션이라면 파라미터? :타입명으로 선언하셈
?의 정확한 뜻은 | undefined랑 같은 거임
애매한 타입들은 미리 타입을 검사하는 것이 필요함

type이 아직 하나로 확정되지 않은 경우엔 type narrowing 써야함
typeof 변수명 사용하면 변수의 자료형을 문자로 내보내줌
union type 등의 이유로 어떤 변수의 타입이 아직 불확실하다면 if문 등으로 narrowing 해줘야 조작이 가능해짐
if문 썼으면 끝까지 써야 안전함 else나 else if 안쓰면 불완전할 수도 있음
속성명 in 오브젝트자료 / 인스턴스 instanceof 부모 등등도 다 narrowing에 속함
그냥 현재 변수의 타입이 뭔지 특정만 지을 수 있으면 narrowing으로 판정해줌
narrowing이 귀찮으면 assertion 문법을 써보던가
타입 덮어쓰는 형태의 문법임
변수명 as 자료형 (해당 변수를 해당 자료형으로 덮어씌워주세요) => 근데 그렇다고 변수의 자료형을 바꿀 수는 없음
assertion 문법의 용도가 뭐임?
1. narrowing 할 때 쓰기도 하고, 2. 무슨 타입이 100% 확실할 때 사용해야함
그래서 as 문법 사용하면 에러가 있어도 잡아주니까 잘 사용해야 함
그러니까 평소에는 잘 사용 안 함
코드짜다가 콘솔창에 변수 출력해보고 싶으면 html 파일 안에 ts 파일 변환시킨 js 파일을 넣어서 확인해보면 됨
