vue.js 하기전 설치할 거
1. nodejs 설치
2. (터미널) npm install -g @vue/cli
3. (원하는 위치에서) vue create {프로젝트명}
4. vue 부가기능 설치 (extensions) - Vetur, Vue 3 snippets, html css support
5. 미리보기 - npm run serve

원래 html 짜는 거처럼 template 자리에 html 태그 넣고, style 자리에 css 속성 지정하면 됨
{{데이터 바인딩}}: html에 js 데이터를 꽂아넣을 수 있음
근데 좀 좋은 점: 원래 js 문법을 그대로 사용하지 않고 vue만의 방식으로 데이터 바인딩 ㅆㄱㄴ
데이터 만드는 법 - 'data() {return {여기 안에 데이터 넣으면 됨}}' - 데이터 보관함이라고 생각하셈
단 데이터는 Object 형식으로 저장할 것
데이터를 집어넣을 때는 '{{데이터 이름}}' 요거 사용하면 됨
이 문법은 언제 쓸까? - 1. 하드코딩 ㄴㄴ염 변경하기 힘들잖음 2. vue의 실시간 자동 렌더링 기능 사용 가능함! (데이터가 바뀌는 즉시 알아서 변형시켜줌) => 요거 때문에 웹앱 개발 가능한 거임
대신 바뀌지 않는 데이터는 굳이 데이터 바인딩 하지 말고 걍 원래대로 쓰셈
html 속성도 데이터 바인딩 가능함 - :속성="데이터이름" 이때는 데이터이름 {{}}로 안 감싸도 됨

반복문
<태그 v-for="작명 in 반복 횟수" :key="작명">
반복문에서 :key 안 쓰면 에러남
근데 사실 반복 횟수 자리에 데이터를 넣을 수도 있음
<태그 v-for="작명 in 데이터 이름" :key="작명"> - 보통 데이터는 array나 Object임
<태그 v-for="작명 in 데이터 이름" :key="작명">{{작명}}</태그> -> 요로면 데이터 안의 자료들이 알아서 쓰여짐
:key의 용도가 뭐임? 반복문 돌린 요소를 컴퓨터가 구분하기 위해 씀 => 반복문 돌면서 변하는 숫자나 문자를 적음
<태그 v-for="(작명, 작명2) in 데이터 이름" :key="작명2"> - 작명: array 내 데이터, 작명2: 1씩 증가하는 변수

vue 내에서 클릭 구현하려면
v-on:click="자바스크립트 코드" 요거 써야함 (v-on: 대신 @ 써도 됨)
사실 click 말고 event가 많음 - mouseover(마우스 올리면) 등등
자바스크립트 코드가 길어지면 함수 쓰고, 함수를 저 자리에 쓰면 됨
함수는 어케 만듦?
method: {함수명() {함수 안에서 동작할 코드}}
function 안에서 변수 사용할려면 'this.변수명' 사용하셈

vue 개발 팁
데이터 어떻게 만들지 정하고 로직 짜기로 ㄲ
img 넣는 법: 절대 경로는 걍 넣으셈. 상대 경로는 원래 하던 대로 하셈
UI는 어케 만듦? 무에서 유 창조가 아님. 만들어 넣고 안 보이게 했다가 원할 때 보여주는 거임
동적 UI 만드는 법칙 0. html css로 기본 디자인 설정하셈 1. ui의 현재 상태를 데이터로 저장하셈 2. 데이터에 따라 ui가 어떻게 보일지 작성
vue의 조건식: v-if="조건식" ==> 역할: 조건식이 참일 때만 html 보여줌

서버에서 데이터 가져오면 되는데 지금은 서버가 없잖음?
그래서 서버 대용으로 대용량 데이터를 가져왔음. 근데 데이터가 너무 길어서 보기 싫음
그럴 때는 다른 파일에 넣고 나서 불러오는 게 좋음(import/export)
파일에서 export 된 데이터만 import 할 수 있음
export default 변수명 <=> import 변수명 from 경로 -- 변수가 한 개일 때 (변수가 아니라 하나의 데이터여도 가능함)
export {변수명1, 변수명2, ...} <=> import {변수명1, 변수명2, ...} from 경로 -- 변수가 2개 이상일 때

event 안에 여러 js 코드 넣고 싶으면 한 로직이 끝날 때마다 ; 넣으셈
if문 알아야 할 점: v-else란 것도 있음 => if 조건문이 참이 아니면 else꺼 보여주세요
: v-else-if도 있음 => if 조건문 말고도 다른 조건을 걸 수 있음

component: 긴 html 코드를 하나의 태그로 만들 수 있음
component 생성 방법 1. src 폴더 안에 vue 파일 하나 만들어야 함 2. 그 안에 축약할 html 넣기 (단 vue 파일 형식에 맞게 ㄱㄱ - < 치고 엔터 누르면 됨)
component 어케 씀? 1. vue파일 import 2. components에 등록하고 3. 태그 쓰듯이 사용하셈
component 왜 씀? 1. 일단 길면 보기가 싫음 줄이면 예쁘자나 2. 반복적인 ui 사용에 있어서 재사용이 쉬움
모든 거를 컴퍼넌트로 만들지 마셈. 컴퍼넌트로 만들면 데이터 넣기가 빡세짐
데이터 바인딩할 친구들은 컴퍼넌트로 만들면 다시 재설정해줘야함 == 빡세다 ㅇㅋ?

기본적으로 데이터바인딩은 밑에 데이터가 존재해야 가능함
그럼 component에 데이터 바인딩 못 함? - App에 있는거 복붙하면 되는거 아님? => 후에 server랑 연결했을 때 데이터 바뀌면 그거 어케 다 바꿈;; 하지 마셈
App.vue 안에 Modal.vue가 있잖음 ==> App: 부모 컴퍼넌트, Modal: 자식 컴퍼넌트
자식 컴퍼넌트가 부모가 갖고 있는 데이터 쓰고 싶으면 props를 통해 받을 수 있음
props 어케 씀? 1. 데이터 보내기 2. 등록하기 3. 쓰면 됨
데이터 보내는 방법 <자식 :작명="데이터">
등록은 props에 하셈 방법은 props: {데이터 이름: 자료형 이름}
props는 read-only이기 때문에 받아온 거를 수정할 수 없음 즉 재할당이 불가능함
컴퍼넌트 막 쓰면 복잡해질 수도 있음
데이터 불러오기 귀찮은데 자식 컴퍼넌트에 쓰면 되는거 아님? ==> 상관 없는데 자식 컴퍼넌트의 데이터를 부모 컴퍼넌트가 쓸 경우가 생기면 어려워짐
즉 많이 쓰이는 데이터들은 최상위 컴퍼넌트에다가 생성하셈

props로 보낼 때 다양한 자료형 입력 가능함
Array나 Object를 그대로 적어도 되고, string이나 number도 잘 알아서 감(단 number는 string 형태로 가기 때문에 Number 형태로 넣고 싶으면 작명 앞에 : 잘 붙이셈)
Object의 key-value를 전부 전송하고 싶으면 . operator 잘 써도 되는데, v-bind="오브젝트 데이터 이름" 요걸로 보내도 됨

custom event
component 안에서는 props를 통해 전달받은 데이터를 재할당 및 수정할 수 없음(read-only이기 때문)
그럼 부모에 있는 데이터는 어케 수정함? custom event 사용하셈
'이벤트 버블링'이라는 걸 이용해도 되지만 그렇게 되면 자식 컴퍼넌트에 있는 세부 요소에 대한 이벤트를 정의할 수 없음
custom event가 뭐임? 자식이 부모한테 '메세지'를 보냄 그 메세지의 내용은 데이터를 수정해달리는 거임
자식이 부모에게 메세지 보낼 땐 event="$emit('작명', 데이터)" [데이터 안 보내고 싶으면 작명만 하셈]
부모가 수신하는 방법은 @작명="자바스크립트 코드"
자식이 보낸 메세지 안에 있는 데이터는 $event 안에 담겨있음
$emit()을 함수 안에서 하고 싶으면 함수 안에 기능으로 this.$emit(방식 동일)